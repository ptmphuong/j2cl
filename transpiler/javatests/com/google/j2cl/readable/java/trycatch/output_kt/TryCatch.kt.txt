// Generated from "trycatch/TryCatch.java"
package trycatch

import javaemul.lang.*
import java.lang.AutoCloseable
import java.lang.ClassCastException
import javaemul.internal.Exceptions
import kotlin.Exception
import kotlin.NullPointerException
import kotlin.RuntimeException
import kotlin.Throwable
import kotlin.assert
import kotlin.jvm.JvmField
import trycatch.TryCatch

open class TryCatch {
 open fun testMultiCatch() {
  try {
   throw ClassCastException()
  } catch (e: NullPointerException) {
   throw e!!
  } catch (e: kotlin.ClassCastException) {
   throw e!!
  } catch (r: RuntimeException) {
   var r_1: RuntimeException? = r
   r_1 = null
  }
 }

 open fun testEmptyThrowableCatch() {
  try {
   throw ClassCastException()
  } catch (e: Throwable) {}
  try {
   throw ClassCastException()
  } catch (e_1: Exception) {} catch (e_2: Throwable) {}
 }

 open fun testEmptyThrowableRethrow() {
  try {
   throw ClassCastException()
  } catch (e: Throwable) {
   throw e!!
  }
 }

 open fun testFinally() {
  try {
   assert(true)
  } finally {}
 }

 open fun testTryWithResource() {
  try {
   var ___primaryExc: Throwable? = null
   var thing: TryCatch.ClosableThing? = null
   var thing2: TryCatch.ClosableThing? = null
   try {
    thing = TryCatch.ClosableThing()
    thing2 = TryCatch.ClosableThing()
    throw java.lang.Exception()
   } catch (___exceptionFromTry: Throwable) {
    ___primaryExc = ___exceptionFromTry
    throw ___exceptionFromTry!!
   } finally {
    ___primaryExc = Exceptions.safeClose(thing2, ___primaryExc)
    ___primaryExc = Exceptions.safeClose(thing, ___primaryExc)
    if (___primaryExc != null) throw ___primaryExc!!
   }
  } catch (e: Exception) {}
 }

 open fun testTryWithResourceJava9() {
  val thing: TryCatch.ClosableThing? = TryCatch.ClosableThing()
  val thing2: TryCatch.ClosableThing? = TryCatch.ClosableThing()
  try {
   var ___primaryExc: Throwable? = null
   var ___resource: TryCatch.ClosableThing? = null
   var ___resource_1: TryCatch.ClosableThing? = null
   try {
    ___resource = thing
    ___resource_1 = thing2
    throw java.lang.Exception()
   } catch (___exceptionFromTry: Throwable) {
    ___primaryExc = ___exceptionFromTry
    throw ___exceptionFromTry!!
   } finally {
    ___primaryExc = Exceptions.safeClose(___resource_1, ___primaryExc)
    ___primaryExc = Exceptions.safeClose(___resource, ___primaryExc)
    if (___primaryExc != null) throw ___primaryExc!!
   }
  } catch (e: Exception) {}
 }

 open fun testTryWithResouceOnStaticField() {
  try {
   var ___primaryExc: Throwable? = null
   var ___resource: TryCatch.ClosableThing? = null
   try {
    ___resource = TryCatch.closableThing_private_2
    throw java.lang.Exception()
   } catch (___exceptionFromTry: Throwable) {
    ___primaryExc = ___exceptionFromTry
    throw ___exceptionFromTry!!
   } finally {
    ___primaryExc = Exceptions.safeClose(___resource, ___primaryExc)
    if (___primaryExc != null) throw ___primaryExc!!
   }
  } catch (e: Exception) {}
 }

 open fun testNestedTryCatch() {
  try {
   throw java.lang.Exception()
  } catch (ae: Exception) {
   try {
    throw java.lang.Exception()
   } catch (ie: Exception) {}
  }
 }

 open fun testThrowGenerics() {
  throw this.getT_private_2<Exception?>(java.lang.Exception())!!
 }

 fun <T> getT_private_2(t: T): T {
  return t
 }

 open fun testThrowBoundGenerics() {
  throw this.getThrowable_private_2<Throwable?>()!!
 }

 fun <T: Throwable?> getThrowable_private_2(): T {
  return null as T
 }

 companion object {
  @JvmField val closableThing_private_2: TryCatch.ClosableThing? = TryCatch.ClosableThing()
 }

 open class ClosableThing: AutoCloseable {
  open override fun close() {}
 }
}
