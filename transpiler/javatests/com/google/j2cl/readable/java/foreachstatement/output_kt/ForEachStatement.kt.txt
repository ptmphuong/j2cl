// Generated from "foreachstatement/ForEachStatement.java"
package foreachstatement

import javaemul.lang.*
import foreachstatement.ForEachStatement
import java.lang.Exception
import javaemul.lang.JavaIterable
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.Throwable
import kotlin.arrayOfNulls
import kotlin.collections.MutableIterable
import kotlin.collections.MutableIterator

open class ForEachStatement {
 open fun test(iterable: MutableIterable<Throwable?>?) {
  for (t in iterable!!) {
   val t_1: Throwable? = t
   t_1!!.toString()
  }
  for (t_2 in arrayOfNulls<Throwable>(10)) {
   val t_3: Throwable? = t_2
   t_3!!.toString()
  }
 }

 fun testMulticatch_private_2() {
  try {
   throw Exception()
  } catch (e: ForEachStatement.Exception1) {
   for (o in e!!) {
    val o_1: Any? = o
   }
  } catch (e: ForEachStatement.Exception2) {
   for (o in e!!) {
    val o_1: Any? = o
   }
  }
 }

 fun <T: MutableIterable<String?>?, U: T> testTypeVariable_private_2() {
  val iterable: U? = null
  for (s in iterable!!) {
   val s_1: String? = s
  }
  val anotherIterable: ForEachStatement.IterableReturningTypeVariable<*>? = null
  for (s_2 in anotherIterable!!) {
   val s_3: Int = s_2!!
  }
 }

 open class Exception1: JavaIterable<String?>, Exception() {
  open override fun iterator(): MutableIterator<String?> {
   return null!!
  }
 }

 open class Exception2: JavaIterable<Any?>, Exception() {
  open override fun iterator(): MutableIterator<Any?> {
   return null!!
  }
 }

 open class IterableReturningTypeVariable<T: MutableIterator<Int?>>: JavaIterable<Int?> {
  open override fun iterator(): T {
   return null!!
  }
 }
}
