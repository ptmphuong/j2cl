// Generated from "foreachstatement/ForEachStatement.java"
package foreachstatement

import javaemul.lang.*
import kotlin.jvm.*

open class ForEachStatement {
 open fun test(iterable: kotlin.collections.MutableIterable<kotlin.Throwable?>?) {
  FOR_EACH@ for (t in iterable!!) {
   val t_1: kotlin.Throwable? = t
   t_1!!.toString()
  }
  FOR_EACH_1@ for (t_2 in kotlin.arrayOfNulls<kotlin.Throwable>(10)) {
   val t_3: kotlin.Throwable? = t_2
   t_3!!.toString()
  }
 }

 fun testMulticatch_private_2() {
  try {
   throw java.lang.Exception()
  } catch (e: foreachstatement.ForEachStatement.Exception1) {
   FOR_EACH@ for (o in e!!) {
    val o_1: kotlin.Any? = o
   }
  } catch (e: foreachstatement.ForEachStatement.Exception2) {
   FOR_EACH@ for (o in e!!) {
    val o_1: kotlin.Any? = o
   }
  }
 }

 fun <T: kotlin.collections.MutableIterable<kotlin.String?>?, U: T> testTypeVariable_private_2() {
  val iterable: U? = null
  FOR_EACH@ for (s in iterable!!) {
   val s_1: kotlin.String? = s
  }
  val anotherIterable: foreachstatement.ForEachStatement.IterableReturningTypeVariable<*>? = null
  FOR_EACH_1@ for (s_2 in anotherIterable!!) {
   val s_3: kotlin.Int = s_2!!
  }
 }

 open class Exception1: javaemul.lang.JavaIterable<kotlin.String?>, java.lang.Exception() {
  open override fun iterator(): kotlin.collections.MutableIterator<kotlin.String?> {
   return null!!
  }
 }

 open class Exception2: javaemul.lang.JavaIterable<kotlin.Any?>, java.lang.Exception() {
  open override fun iterator(): kotlin.collections.MutableIterator<kotlin.Any?> {
   return null!!
  }
 }

 open class IterableReturningTypeVariable<T: kotlin.collections.MutableIterator<kotlin.Int?>>: javaemul.lang.JavaIterable<kotlin.Int?> {
  open override fun iterator(): T {
   return null!!
  }
 }
}
