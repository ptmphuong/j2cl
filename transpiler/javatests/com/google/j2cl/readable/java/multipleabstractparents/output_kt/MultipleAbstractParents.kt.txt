// Generated from "multipleabstractparents/MultipleAbstractParents.java"
package multipleabstractparents

import javaemul.lang.*
import kotlin.Array
import kotlin.String
import kotlin.assert
import kotlin.jvm.JvmStatic
import multipleabstractparents.MultipleAbstractParents

open class MultipleAbstractParents {
 companion object {
  @JvmStatic
  fun main(vararg args: String?) {
   val args_1: Array<String?>? = args as Array<String?>?
   assert(MultipleAbstractParents.ArrayList<String?>().getFoo(null)!!.equals("AbstractCollection"))
   assert(MultipleAbstractParents.StringList().getFoo(null)!!.equals("AbstractCollection"))
   assert((MultipleAbstractParents.StringList() as MultipleAbstractParents.IStringList?)!!.getFoo(null)!!.equals("AbstractCollection"))
  }
 }

 fun interface List<T> {
  fun getFoo(t: T): String?
 }

 fun interface Collection<T> {
  fun getFoo(t: T): String?
 }

 abstract class AbstractListCollection<T>: MultipleAbstractParents.List<T>, MultipleAbstractParents.Collection<T> {}

 abstract class AbstractCollection<T> {
  open fun getFoo(t: T): String? {
   return "AbstractCollection"
  }
 }

 abstract class AbstractList<T>: MultipleAbstractParents.List<T>, MultipleAbstractParents.AbstractCollection<T>() {}

 abstract class AbstractList2<T>: MultipleAbstractParents.List<T> {}

 open class ArrayList<T>: MultipleAbstractParents.AbstractList<T>() {}

 fun interface IStringList: MultipleAbstractParents.List<String?> {
  override fun getFoo(string: String?): String?
 }

 abstract class AbstractStringList: MultipleAbstractParents.IStringList, MultipleAbstractParents.AbstractList<String?>() {}

 abstract class AbstractStringList2: MultipleAbstractParents.IStringList, MultipleAbstractParents.AbstractList2<String?>() {}

 abstract class AbstractStringList3: MultipleAbstractParents.AbstractList2<String?>() {}

 open class StringList: MultipleAbstractParents.AbstractStringList() {}

 open class StringListChild: MultipleAbstractParents.StringList() {}
}
