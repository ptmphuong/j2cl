// Generated from "nativekttypes/Main.java"
package nativekttypes

import javaemul.lang.*
import java.lang.Class
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import kotlin.jvm.javaObjectType
import nativekttypes.BridgeSubclass
import nativekttypes.Subclass
import nativekttypes.nativekt.KBridge
import nativekttypes.nativekt.KCompanionObject
import nativekttypes.nativekt.KFunctionalInterfaceBridge
import nativekttypes.nativekt.KFunctionalInterfaceRequiringBridge
import nativekttypes.nativekt.KInterface
import nativekttypes.nativekt.KRequiringBridge
import nativekttypes.nativekt.KTopLevel
import nativekttypes.nativekt.KWithCompanionObject

open class Main {
 @JvmField var topLevelField: KTopLevel<String?>? = null

 @JvmField var nestedField: KTopLevel.KNested<String?>? = null

 @JvmField var innerField: KTopLevel<String?>.KInner<String?>? = null

 open fun methodArguments(foo: KTopLevel<String?>?, nested: KTopLevel.KNested<String?>?, inner: KTopLevel<String?>.KInner<String?>?) {}

 open fun memberAccess() {
  val topLevel: KTopLevel<String?>? = KTopLevel<String?>("foo")
  val fooInstanceMethod: String? = topLevel!!.instanceMethod("foo")
  val fooStaticMethod: String? = KTopLevel.staticMethod<String?>("foo")
  val fooInstanceField: String? = topLevel!!.instanceField
  topLevel!!.instanceField = "foo"
  val fooStaticField: Any? = KTopLevel.staticField
  KTopLevel.staticField = "foo"
  val i1: Int = topLevel!!.renamedField
  val i2: Int = topLevel!!.renamedMethod()
  val i3: Int = topLevel!!.methodAsProperty
  val i4: Int = topLevel!!.nonGetMethodAsProperty
  val i5: Int = topLevel!!.renamedMethodAsProperty
  val i6: Boolean = topLevel!!.isRenamedField
  val i7: Boolean = topLevel!!.isMethodAsProperty
  val i8: Int = topLevel!!.getstartingmethodAsProperty
  val nested: KTopLevel.KNested<String?>? = KTopLevel.KNested<String?>("foo")
  val nestedInstanceMethod: String? = nested!!.instanceMethod("foo")
  val nestedStaticMethod: String? = KTopLevel.KNested.staticMethod<String?>("foo")
  val nestedInstanceField: String? = nested!!.instanceField
  nested!!.instanceField = "foo"
  val nestedStaticField: Any? = KTopLevel.KNested.staticField
  KTopLevel.KNested.staticField = "foo"
  val nestedAnonynous: KTopLevel.KNested<String?>? = object : KTopLevel.KNested<String?>("foo") {}
  val inner: KTopLevel<String?>.KInner<String?>? = topLevel!!.KInner<String?>("foo")
  val subclass: Subclass<String?>? = Subclass<String?>("foo")
  val i9: Int = subclass!!.renamedMethod()
  val i10: Int = subclass!!.interfaceMethod("foo")
  val i11: Int = subclass!!.renamedInterfaceMethod("foo")
  val interfaceAnonymousSubclass: KInterface.KFunctionalInterface? = object : KInterface.KFunctionalInterface {
   open override fun run() {}
  }
  val interfaceExpression: KInterface.KFunctionalInterface? = KInterface.KFunctionalInterface {
   return@KFunctionalInterface
  }
 }

 open fun bridges() {
  var o: KRequiringBridge? = KBridge()
  o = object : KBridge() {}
  o = BridgeSubclass()
  var fi: KFunctionalInterfaceRequiringBridge<String?>? = null
  fi = KFunctionalInterfaceBridge<String?> { s: String? ->
   return@KFunctionalInterfaceBridge s
  }
  fi = object : KFunctionalInterfaceBridge<String?> {
   open override fun foo(s: String?): String? {
    return s
   }
  }
  val cast: KRequiringBridge? = o as KRequiringBridge?
  val instanceofCheck: Boolean = o is KRequiringBridge
 }

 open fun casts() {
  val o1: KTopLevel<String?>? = null as KTopLevel<String?>?
  val o2: KTopLevel.KNested<String?>? = null as KTopLevel.KNested<String?>?
  val o3: KTopLevel<String?>.KInner<String?>? = null as KTopLevel<String?>.KInner<String?>?
 }

 open fun companionObject() {
  val o: KWithCompanionObject? = KWithCompanionObject()
  val i1: Int = o!!.instanceField
  o!!.instanceMethod()
  KCompanionObject.staticMethod()
  val i2: Int = KCompanionObject.staticField
  KCompanionObject.staticField = i2
 }

 open fun typeLiterals() {
  val c1: Class<*>? = KTopLevel::class.javaObjectType
  val c2: Class<*>? = KTopLevel.KNested::class.javaObjectType
  val c3: Class<*>? = KTopLevel.KInner::class.javaObjectType
 }

 open fun disabledVoidMethod() {}

 open fun disabledNonVoidMethod(): Boolean {
  return false
 }

 open fun todoMethod(string: String?) {
  TODO("J2KT: not yet supported")
 }
}

open class Subclass<V>: KInterface<V>, KTopLevel<V> {
 constructor(v: V): super(v)

 open override fun renamedMethod(): Int {
  return super<KTopLevel>.renamedMethod()
 }

 open override val methodAsProperty: Int get() {
  return super<KTopLevel>.methodAsProperty
 }

 open override val nonGetMethodAsProperty: Int get() {
  return super<KTopLevel>.nonGetMethodAsProperty
 }

 open override val renamedMethodAsProperty: Int get() {
  return super<KTopLevel>.renamedMethodAsProperty
 }

 open override val getRenamedMethodAsProperty: Int get() {
  return super<KTopLevel>.getRenamedMethodAsProperty
 }

 open override val isMethodAsProperty: Boolean get() {
  return super<KTopLevel>.isMethodAsProperty
 }

 open override val getstartingmethodAsProperty: Int get() {
  return super<KTopLevel>.getstartingmethodAsProperty
 }

 open override fun interfaceMethod(v: V): Int {
  return 0
 }

 open override fun renamedInterfaceMethod(v: V): Int {
  return 0
 }

 open override val interfaceMethodAsProperty: Int get() {
  return 0
 }

 open override val renamedInterfaceMethodAsProperty: Int get() {
  return 0
 }
}

open class Subsubclass<V>: Subclass<V> {
 constructor(v: V): super(v)

 open override fun renamedMethod(): Int {
  return super<Subclass>.renamedMethod()
 }

 open override val methodAsProperty: Int get() {
  return super<Subclass>.methodAsProperty
 }

 open override val nonGetMethodAsProperty: Int get() {
  return super<Subclass>.nonGetMethodAsProperty
 }

 open override val renamedMethodAsProperty: Int get() {
  return super<Subclass>.renamedMethodAsProperty
 }

 open override val getRenamedMethodAsProperty: Int get() {
  return super<Subclass>.getRenamedMethodAsProperty
 }

 open override val isMethodAsProperty: Boolean get() {
  return super<Subclass>.isMethodAsProperty
 }

 open override val getstartingmethodAsProperty: Int get() {
  return super<Subclass>.getstartingmethodAsProperty
 }

 open override fun interfaceMethod(v: V): Int {
  return 0
 }

 open override fun renamedInterfaceMethod(v: V): Int {
  return 0
 }

 open override val interfaceMethodAsProperty: Int get() {
  return 0
 }

 open override val renamedInterfaceMethodAsProperty: Int get() {
  return 0
 }
}

open class BridgeSubclass: KBridge() {
 open override fun method() {
  super<KBridge>.method()
 }
}
