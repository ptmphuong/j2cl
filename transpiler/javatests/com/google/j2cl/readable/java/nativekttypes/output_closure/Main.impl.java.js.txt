goog.module('nativekttypes.Main$impl');

const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let System = goog.forwardDeclare('java.lang.System$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let BridgeSubclass = goog.forwardDeclare('nativekttypes.BridgeSubclass$impl');
let $1 = goog.forwardDeclare('nativekttypes.Main.$1$impl');
let $2 = goog.forwardDeclare('nativekttypes.Main.$2$impl');
let $3 = goog.forwardDeclare('nativekttypes.Main.$3$impl');
let $4 = goog.forwardDeclare('nativekttypes.Main.$4$impl');
let NativeFunctionalInterfaceRequiringBridge = goog.forwardDeclare('nativekttypes.NativeFunctionalInterfaceRequiringBridge$impl');
let NativeFunctionalInterface = goog.forwardDeclare('nativekttypes.NativeInterface.NativeFunctionalInterface$impl');
let NativeRequiringBridge = goog.forwardDeclare('nativekttypes.NativeRequiringBridge$impl');
let NativeTopLevel = goog.forwardDeclare('nativekttypes.NativeTopLevel$impl');
let Inner = goog.forwardDeclare('nativekttypes.NativeTopLevel.Inner$impl');
let Nested = goog.forwardDeclare('nativekttypes.NativeTopLevel.Nested$impl');
let NativeWithCompanionObject = goog.forwardDeclare('nativekttypes.NativeWithCompanionObject$impl');
let Subclass = goog.forwardDeclare('nativekttypes.Subclass$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');

class Main extends j_l_Object {
 /** @protected @nodts */
 constructor() {
  super();
  /**@type {NativeTopLevel<?string>} @nodts*/
  this.f_topLevelField__nativekttypes_Main;
  /**@type {Nested<?string>} @nodts*/
  this.f_nestedField__nativekttypes_Main;
  /**@type {Inner<?string, ?string>} @nodts*/
  this.f_innerField__nativekttypes_Main;
 }
 /** @nodts @return {!Main} */
 static $create__() {
  Main.$clinit();
  let $instance = new Main();
  $instance.$ctor__nativekttypes_Main__void();
  return $instance;
 }
 /** @nodts */
 $ctor__nativekttypes_Main__void() {
  this.$ctor__java_lang_Object__void();
 }
 /** @nodts */
 m_methodArguments__nativekttypes_NativeTopLevel__nativekttypes_NativeTopLevel_Nested__nativekttypes_NativeTopLevel_Inner__void(/** NativeTopLevel<?string> */ foo, /** Nested<?string> */ nested, /** Inner<?string, ?string> */ inner) {}
 /** @nodts */
 m_memberAccess__void() {
  let topLevel = /**@type {!NativeTopLevel<?string>}*/ (NativeTopLevel.$create__java_lang_Object('foo'));
  let fooInstanceMethod = /**@type {?string}*/ ($Casts.$to(topLevel.instanceMethod('foo'), j_l_String));
  let fooStaticMethod = /**@type {?string}*/ ($Casts.$to(NativeTopLevel.staticMethod('foo'), j_l_String));
  let fooInstanceField = /**@type {?string}*/ ($Casts.$to(topLevel.f_instanceField__nativekttypes_NativeTopLevel, j_l_String));
  topLevel.f_instanceField__nativekttypes_NativeTopLevel = 'foo';
  let fooStaticField = NativeTopLevel.f_staticField__nativekttypes_NativeTopLevel;
  NativeTopLevel.f_staticField__nativekttypes_NativeTopLevel = 'foo';
  let i1 = topLevel.f_fieldToRename__nativekttypes_NativeTopLevel;
  let i2 = topLevel.methodToRename();
  let i3 = topLevel.getMethodAsProperty();
  let i4 = topLevel.nonGetMethodAsProperty();
  let i5 = topLevel.methodToRenameAsProperty();
  let i6 = topLevel.f_isFieldToRename__nativekttypes_NativeTopLevel;
  let i7 = topLevel.isMethodAsProperty();
  let i8 = topLevel.getstartingmethodAsProperty();
  let nested = /**@type {!Nested<?string>}*/ (Nested.$create__java_lang_Object('foo'));
  let nestedInstanceMethod = /**@type {?string}*/ ($Casts.$to(nested.instanceMethod('foo'), j_l_String));
  let nestedStaticMethod = /**@type {?string}*/ ($Casts.$to(Nested.staticMethod('foo'), j_l_String));
  let nestedInstanceField = /**@type {?string}*/ ($Casts.$to(nested.f_instanceField__nativekttypes_NativeTopLevel_Nested, j_l_String));
  nested.f_instanceField__nativekttypes_NativeTopLevel_Nested = 'foo';
  let nestedStaticField = Nested.f_staticField__nativekttypes_NativeTopLevel_Nested;
  Nested.f_staticField__nativekttypes_NativeTopLevel_Nested = 'foo';
  let nestedAnonynous = $1.$create__nativekttypes_Main__java_lang_String(this, 'foo');
  let inner = /**@type {!Inner<?string, ?string>}*/ (Inner.$create__nativekttypes_NativeTopLevel__java_lang_Object(topLevel, 'foo'));
  let subclass = /**@type {!Subclass<?string>}*/ (new Subclass('foo'));
  let i9 = subclass.methodToRename();
  let i10 = subclass.m_interfaceMethod__java_lang_Object__int('foo');
  let i11 = subclass.m_interfaceMethodToRename__java_lang_Object__int('foo');
  let interfaceAnonymousSubclass = $2.$create__nativekttypes_Main(this);
  let interfaceExpression = NativeFunctionalInterface.$adapt(() =>{
   KFunctionalInterface: {
    return;
   }
  });
 }
 /** @nodts */
 m_bridges__void() {
  let o = NativeRequiringBridge.$create__();
  o = $3.$create__nativekttypes_Main(this);
  o = BridgeSubclass.$create__();
  let /** NativeFunctionalInterfaceRequiringBridge<?string> */ fi;
  fi = NativeFunctionalInterfaceRequiringBridge.$adapt((s) =>{
   let s_1 = /**@type {?string}*/ ($Casts.$to(s, j_l_String));
   return s_1;
  });
  fi = $4.$create__nativekttypes_Main(this);
  let cast = /**@type {NativeRequiringBridge}*/ (o);
  let instanceofCheck = !$Equality.$same(o, null);
 }
 /** @nodts */
 m_casts__void() {
  let o1 = /**@type {NativeTopLevel<?string>}*/ (null);
  let o2 = /**@type {Nested<?string>}*/ (null);
  let o3 = /**@type {Inner<?string, ?string>}*/ (null);
 }
 /** @nodts */
 m_companionObject__void() {
  let o = NativeWithCompanionObject.$create__();
  let i1 = o.f_instanceField__nativekttypes_NativeWithCompanionObject;
  o.m_instanceMethod__void();
  NativeWithCompanionObject.m_staticMethod__void();
  let i2 = NativeWithCompanionObject.f_staticField__nativekttypes_NativeWithCompanionObject;
  NativeWithCompanionObject.f_staticField__nativekttypes_NativeWithCompanionObject = i2;
 }
 /** @nodts */
 m_typeLiterals__void() {
  let c1 = Class.$get(NativeTopLevel);
  let c2 = Class.$get(Nested);
  let c3 = Class.$get(Inner);
 }
 /** @nodts */
 m_disabledVoidMethod__void() {
  let i = 0;
 }
 /** @nodts @return {boolean} */
 m_disabledNonVoidMethod__boolean() {
  return true;
 }
 /** @nodts */
 m_todoMethod__java_lang_String__void(/** ?string */ string_1) {
  System.f_out__java_lang_System.m_println__java_lang_String__void('Hello: ' + j_l_String.m_valueOf__java_lang_Object__java_lang_String(string_1));
 }
 /** @nodts */
 static $clinit() {
  Main.$clinit = () =>{};
  Main.$loadModules();
  j_l_Object.$clinit();
 }
 /** @nodts @return {boolean} */
 static $isInstance(/** ? */ instance) {
  return instance instanceof Main;
 }
 
 /** @nodts */
 static $loadModules() {
  Class = goog.module.get('java.lang.Class$impl');
  j_l_String = goog.module.get('java.lang.String$impl');
  System = goog.module.get('java.lang.System$impl');
  $Equality = goog.module.get('nativebootstrap.Equality$impl');
  BridgeSubclass = goog.module.get('nativekttypes.BridgeSubclass$impl');
  $1 = goog.module.get('nativekttypes.Main.$1$impl');
  $2 = goog.module.get('nativekttypes.Main.$2$impl');
  $3 = goog.module.get('nativekttypes.Main.$3$impl');
  $4 = goog.module.get('nativekttypes.Main.$4$impl');
  NativeFunctionalInterfaceRequiringBridge = goog.module.get('nativekttypes.NativeFunctionalInterfaceRequiringBridge$impl');
  NativeFunctionalInterface = goog.module.get('nativekttypes.NativeInterface.NativeFunctionalInterface$impl');
  NativeRequiringBridge = goog.module.get('nativekttypes.NativeRequiringBridge$impl');
  NativeTopLevel = goog.module.get('nativekttypes.NativeTopLevel$impl');
  Inner = goog.module.get('nativekttypes.NativeTopLevel.Inner$impl');
  Nested = goog.module.get('nativekttypes.NativeTopLevel.Nested$impl');
  NativeWithCompanionObject = goog.module.get('nativekttypes.NativeWithCompanionObject$impl');
  Subclass = goog.module.get('nativekttypes.Subclass$impl');
  $Casts = goog.module.get('vmbootstrap.Casts$impl');
 }
}
$Util.$setClassMetadata(Main, 'nativekttypes.Main');

exports = Main;

//# sourceMappingURL=Main.js.map
