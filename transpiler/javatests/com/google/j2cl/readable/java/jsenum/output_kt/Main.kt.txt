// Generated from "jsenum/Main.java"
package jsenum

import javaemul.lang.*
import kotlin.jvm.*

open class Main {
 companion object {
  @kotlin.jvm.JvmStatic
  fun testJsEnumSwitch() {
   var comparableJsEnum: jsenum.Main.ComparableJsEnum? = if (jsenum.Main.ComparableJsEnum.ONE.getValue() === 1) jsenum.Main.ComparableJsEnum.TWO else null
   SWITCH@ do {
    when (comparableJsEnum!!) {
     jsenum.Main.ComparableJsEnum.TWO -> {
      break@SWITCH
     }
     else -> {}
    }
   } while (false)
   val comparable: kotlin.Comparable<kotlin.Any>? = comparableJsEnum as kotlin.Comparable<kotlin.Any>?
   comparableJsEnum = comparable as jsenum.Main.ComparableJsEnum?
   var intJsEnum: jsenum.Main.IntJsEnum? = if (jsenum.Main.IntJsEnum.ELEVEN.getValue() === 10) jsenum.Main.IntJsEnum.ELEVEN else null
   SWITCH_1@ do {
    when (intJsEnum!!) {
     jsenum.Main.IntJsEnum.TWENTY -> {
      break@SWITCH_1
     }
     else -> {}
    }
   } while (false)
   val o: kotlin.Any? = intJsEnum
   intJsEnum = o as jsenum.Main.IntJsEnum?
   val equal: kotlin.Boolean = intJsEnum === jsenum.Main.IntJsEnum.TWENTY
   var isInstance: kotlin.Boolean = intJsEnum is jsenum.Main.IntJsEnum
   isInstance = intJsEnum is kotlin.Comparable<*>
   val stringJsEnum: jsenum.Main.StringJsEnum? = if (jsenum.Main.StringJsEnum.ONE.getValue() === "10") jsenum.Main.StringJsEnum.THREE else null
   SWITCH_2@ do {
    when (stringJsEnum!!) {
     jsenum.Main.StringJsEnum.ONE -> {
      break@SWITCH_2
     }
     else -> {}
    }
   } while (false)
   jsenum.Main.NativeStringEnum.ONE.compareTo(jsenum.Main.NativeStringEnum.THREE)
   jsenum.Main.NativeStringEnum.ONE.equals(jsenum.Main.NativeStringEnum.THREE)
   jsenum.Main.ComparableJsEnum.ONE.compareTo(jsenum.Main.ComparableJsEnum.ZERO)
   jsenum.Main.ComparableJsEnum.ONE.equals(jsenum.Main.ComparableJsEnum.ZERO)
   val supplier: java.util.function.Supplier<jsenum.Main.ComparableJsEnum?>? = java.util.function.Supplier {
    return@Supplier jsenum.Main.ComparableJsEnum.ONE
   }
   val consummer: java.util.function.Consumer<jsenum.Main.ComparableJsEnum?>? = java.util.function.Consumer { e: jsenum.Main.ComparableJsEnum? ->
    e!!.ordinal
   }
  }

  @kotlin.jvm.JvmStatic
  fun testBoxUnboxWithTypeInference_private_2() {
   val templatedField: jsenum.Main.TemplatedField<jsenum.Main.ComparableJsEnum?>? = jsenum.Main.TemplatedField<jsenum.Main.ComparableJsEnum?>(jsenum.Main.ComparableJsEnum.ONE)
   var unboxed: jsenum.Main.ComparableJsEnum? = templatedField!!.getValue()
   unboxed = templatedField!!.value
   templatedField!!.value = jsenum.Main.ComparableJsEnum.ONE
   java.util.Arrays.asList<jsenum.Main.ComparableJsEnum>(*(kotlin.arrayOf<kotlin.Any?>(jsenum.Main.ComparableJsEnum.ONE) as kotlin.Array<jsenum.Main.ComparableJsEnum>))
   templatedField!!.getValue()!!.ordinal
   val b: kotlin.Boolean = jsenum.Main.ComparableJsEnum.ONE === jsenum.Main.boxingPassthrough_private_2<jsenum.Main.ComparableJsEnum?>(jsenum.Main.ComparableJsEnum.ONE)
  }

  @kotlin.jvm.JvmStatic
  fun <T> boxingPassthrough_private_2(t: T): T {
   return t
  }

  @kotlin.jvm.JvmStatic
  fun boxingWithGenerics() {
   jsenum.Main.Foo<kotlin.Any?>(java.util.Optional.of<jsenum.Main.IntJsEnum?>(jsenum.Main.IntJsEnum.MINUSONE))
  }
 }

 enum class ComparableJsEnum {
  ZERO,
  ONE,
  TWO;

  open fun getValue(): kotlin.Int {
   return this.ordinal
  }
 }

 enum class IntJsEnum {
  MINUSONE(-1),
  TWENTY(20),
  ELEVEN(11);

  @kotlin.jvm.JvmField var value_private_2: kotlin.Int = 0

  open fun getValue(): kotlin.Int {
   return this.value_private_2
  }

  constructor(value: kotlin.Int) {
   this.value_private_2 = value
  }
 }

 enum class StringJsEnum {
  ONE("ONE"),
  THREE("THREE");

  @kotlin.jvm.JvmField var value_private_2: kotlin.String? = null

  open fun getValue(): kotlin.String? {
   return this.value_private_2
  }

  constructor(value: kotlin.String?) {
   this.value_private_2 = value
  }
 }

 enum class NonNullableStringJsEnum {
  ONE("ONE"),
  THREE("THREE");

  @kotlin.jvm.JvmField var value_private_2: kotlin.String

  open fun getValue(): kotlin.String? {
   return this.value_private_2
  }

  constructor(value: kotlin.String?) {
   this.value_private_2 = value!!
  }
 }

 enum class NativeStringEnum {
  ONE,
  THREE;

 }

 open class TemplatedField<T> {
  @kotlin.jvm.JvmField var value: T = null as T

  constructor(value: T) {
   this.value = value
  }

  open fun getValue(): T {
   return this.value
  }
 }

 open class Foo<T> {
  constructor(c: java.util.Optional<jsenum.Main.IntJsEnum?>?)
 }
}
