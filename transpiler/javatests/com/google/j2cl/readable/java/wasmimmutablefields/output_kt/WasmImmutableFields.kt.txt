// Generated from "wasmimmutablefields/WasmImmutableFields.java"
package wasmimmutablefields

import javaemul.lang.*
import kotlin.jvm.*

open class WasmImmutableFields {}

open class AssignmentsInDeclaration {
 @kotlin.jvm.JvmField var compileTimeConstant: kotlin.Int = 12

 @kotlin.jvm.JvmField var stringLiteral: kotlin.String? = "Hello World"

 @kotlin.jvm.JvmField var newArray: kotlin.Array<kotlin.Any?>? = kotlin.arrayOfNulls<kotlin.Any>(4)

 @kotlin.jvm.JvmField var newArrayMultidimensional: kotlin.Array<kotlin.Array<kotlin.Array<kotlin.Any?>?>?>? = kotlin.Array<kotlin.Array<kotlin.Array<kotlin.Any?>?>?>(3) {
  kotlin.arrayOfNulls<kotlin.Array<kotlin.Any?>>(4)
 }

 @kotlin.jvm.JvmField var arrayLiteral: kotlin.IntArray? = kotlin.intArrayOf(1, 2, 3, 4)

 @kotlin.jvm.JvmField var arrayLiteralMultidimensional: kotlin.Array<kotlin.IntArray?>? = kotlin.arrayOf<kotlin.IntArray?>(kotlin.intArrayOf(1, 2), kotlin.intArrayOf(3, 4))

 @kotlin.jvm.JvmField var classLiteral: java.lang.Class<*>? = wasmimmutablefields.WasmImmutableFields::class.javaObjectType

 @kotlin.jvm.JvmField var withCast: kotlin.Array<kotlin.String?>? = (kotlin.arrayOfNulls<kotlin.Any>(0) as kotlin.Any?) as kotlin.Array<kotlin.String?>?
}

open class AssignmentsInInitializer {
 @kotlin.jvm.JvmField var compileTimeConstant: kotlin.Int = 0

 @kotlin.jvm.JvmField var stringLiteral: kotlin.String? = null

 @kotlin.jvm.JvmField var newArray: kotlin.Array<kotlin.Any?>? = null

 @kotlin.jvm.JvmField var newArrayMultidimensional: kotlin.Array<kotlin.Array<kotlin.Array<kotlin.Any?>?>?>? = null

 @kotlin.jvm.JvmField var arrayLiteral: kotlin.IntArray? = null

 @kotlin.jvm.JvmField var arrayLiteralMultidimensional: kotlin.Array<kotlin.IntArray?>? = null

 @kotlin.jvm.JvmField var classLiteral: java.lang.Class<*>? = null

 @kotlin.jvm.JvmField var withCast: kotlin.Array<kotlin.String?>? = null

 init {
  this.compileTimeConstant = 12
  this.stringLiteral = "Hello World"
  this.newArray = kotlin.arrayOfNulls<kotlin.Any>(4)
  this.newArrayMultidimensional = kotlin.Array<kotlin.Array<kotlin.Array<kotlin.Any?>?>?>(3) {
   kotlin.arrayOfNulls<kotlin.Array<kotlin.Any?>>(4)
  }
  this.arrayLiteral = kotlin.intArrayOf(1, 2, 3, 4)
  this.arrayLiteralMultidimensional = kotlin.arrayOf<kotlin.IntArray?>(kotlin.intArrayOf(1, 2), kotlin.intArrayOf(3, 4))
  this.classLiteral = wasmimmutablefields.WasmImmutableFields::class.javaObjectType
  this.withCast = (kotlin.arrayOfNulls<kotlin.Any>(0) as kotlin.Any?) as kotlin.Array<kotlin.String?>?
 }
}

open class AssignmentsInConstructor {
 @kotlin.jvm.JvmField var compileTimeConstant: kotlin.Int = 0

 @kotlin.jvm.JvmField var stringLiteral: kotlin.String? = null

 @kotlin.jvm.JvmField var newArray: kotlin.Array<kotlin.Any?>? = null

 @kotlin.jvm.JvmField var newArrayMultidimensional: kotlin.Array<kotlin.Array<kotlin.Array<kotlin.Any?>?>?>? = null

 @kotlin.jvm.JvmField var arrayLiteral: kotlin.IntArray? = null

 @kotlin.jvm.JvmField var arrayLiteralMultidimensional: kotlin.Array<kotlin.IntArray?>? = null

 @kotlin.jvm.JvmField var classLiteral: java.lang.Class<*>? = null

 @kotlin.jvm.JvmField var withCast: kotlin.Array<kotlin.String?>? = null

 @kotlin.jvm.JvmField var fromParameter: kotlin.Any? = null

 @kotlin.jvm.JvmField var finalFieldReference: kotlin.String? = null

 constructor(parameter: kotlin.Any?, intParameter: kotlin.Int, par: wasmimmutablefields.AssignmentsInConstructor?) {
  this.compileTimeConstant = 12
  this.stringLiteral = "Hello World"
  this.newArray = kotlin.arrayOfNulls<kotlin.Any>(intParameter)
  this.newArrayMultidimensional = kotlin.Array<kotlin.Array<kotlin.Array<kotlin.Any?>?>?>(intParameter) {
   kotlin.arrayOfNulls<kotlin.Array<kotlin.Any?>>(4)
  }
  this.arrayLiteral = kotlin.intArrayOf(1, 2, intParameter, 4)
  this.arrayLiteralMultidimensional = kotlin.arrayOf<kotlin.IntArray?>(kotlin.intArrayOf(1, intParameter), kotlin.intArrayOf(3, 4))
  this.classLiteral = wasmimmutablefields.WasmImmutableFields::class.javaObjectType
  this.withCast = (kotlin.arrayOfNulls<kotlin.Any>(0) as kotlin.Any?) as kotlin.Array<kotlin.String?>?
  this.fromParameter = parameter
  this.finalFieldReference = par!!.stringLiteral
 }
}

open class OptimizesWithThisConstructorDelegation {
 @kotlin.jvm.JvmField var optimizeableField: kotlin.Int = 0

 constructor() {
  this.optimizeableField = 2
 }

 constructor(parameter: kotlin.Int) {
  this.optimizeableField = parameter
 }

 constructor(parameter: kotlin.Short): this(parameter.toInt())
}

open class OptimizesWithSuperConstructorDelegation: wasmimmutablefields.OptimizesWithThisConstructorDelegation {
 constructor()

 constructor(parameter: kotlin.Int): super(parameter)

 constructor(parameter: kotlin.Short): this(parameter.toInt())
}

open class FinalizerTest {
 @kotlin.jvm.JvmField var effectivelyFinalField: kotlin.Int = 1

 @kotlin.jvm.JvmField var readInInit: kotlin.Int = this.effectivelyFinalField

 @kotlin.jvm.JvmField var writtenOutsideConstructor: kotlin.Int = 1

 @kotlin.jvm.JvmField var readBeforeWrite: kotlin.Int = 0

 @kotlin.jvm.JvmField var writtenInDelegatingConstructor: kotlin.Int = 1

 @kotlin.jvm.JvmField var compoundAssignment: kotlin.Int = 0

 @kotlin.jvm.JvmField var effectivelyFinalButNotOptimizedIfBranches: kotlin.Int = 0

 @kotlin.jvm.JvmField var effectivelyFinalButNotOptimizedNestedBlock: kotlin.Int = 0

 @kotlin.jvm.JvmField var writtenInInitAndConstructor: kotlin.Int = 1

 @kotlin.jvm.JvmField var writtenInInitializerAndInDelegatingConstructor: kotlin.Int = 1

 @kotlin.jvm.JvmField var writtenOnlyInDelegatingConstructor: kotlin.Int = 0

 constructor() {
  this.readBeforeWrite = this.readBeforeWrite + 1
  val i: kotlin.Int = this.effectivelyFinalField
  this.compoundAssignment = this.compoundAssignment + 1
  if (i === 3) {
   this.effectivelyFinalButNotOptimizedIfBranches = 1
  } else {
   this.effectivelyFinalButNotOptimizedIfBranches = 1
  }
  this.effectivelyFinalButNotOptimizedNestedBlock = 1
  this.writtenInInitAndConstructor = 1
 }

 constructor(x: kotlin.Int): this() {
  val i: kotlin.Int = this.effectivelyFinalField
  this.writtenInDelegatingConstructor = 1
  this.writtenOnlyInDelegatingConstructor = 1
  this.writtenInInitializerAndInDelegatingConstructor = 1
 }

 open fun foo() {
  val o: wasmimmutablefields.FinalizerTest? = null
  o!!.writtenOutsideConstructor = 1
  val i: kotlin.Int = this.effectivelyFinalField
 }
}
