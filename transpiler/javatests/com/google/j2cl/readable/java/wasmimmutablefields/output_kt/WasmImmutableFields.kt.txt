// Generated from "wasmimmutablefields/WasmImmutableFields.java"
package wasmimmutablefields

import javaemul.lang.*
import java.lang.Class
import kotlin.Any
import kotlin.Array
import kotlin.Int
import kotlin.IntArray
import kotlin.Short
import kotlin.String
import kotlin.arrayOf
import kotlin.arrayOfNulls
import kotlin.intArrayOf
import kotlin.jvm.JvmField
import kotlin.jvm.javaObjectType
import wasmimmutablefields.AssignmentsInConstructor
import wasmimmutablefields.FinalizerTest
import wasmimmutablefields.OptimizesWithThisConstructorDelegation
import wasmimmutablefields.WasmImmutableFields

open class WasmImmutableFields {}

open class AssignmentsInDeclaration {
 @JvmField var compileTimeConstant: Int = 12

 @JvmField var stringLiteral: String? = "Hello World"

 @JvmField var newArray: Array<Any?>? = arrayOfNulls<Any>(4)

 @JvmField var newArrayMultidimensional: Array<Array<Array<Any?>?>?>? = Array<Array<Array<Any?>?>?>(3) {
  arrayOfNulls<Array<Any?>>(4)
 }

 @JvmField var arrayLiteral: IntArray? = intArrayOf(1, 2, 3, 4)

 @JvmField var arrayLiteralMultidimensional: Array<IntArray?>? = arrayOf<IntArray?>(intArrayOf(1, 2), intArrayOf(3, 4))

 @JvmField var classLiteral: Class<*>? = WasmImmutableFields::class.javaObjectType

 @JvmField var withCast: Array<String?>? = (arrayOfNulls<Any>(0) as Any?) as Array<String?>?
}

open class AssignmentsInInitializer {
 @JvmField var compileTimeConstant: Int = 0

 @JvmField var stringLiteral: String? = null

 @JvmField var newArray: Array<Any?>? = null

 @JvmField var newArrayMultidimensional: Array<Array<Array<Any?>?>?>? = null

 @JvmField var arrayLiteral: IntArray? = null

 @JvmField var arrayLiteralMultidimensional: Array<IntArray?>? = null

 @JvmField var classLiteral: Class<*>? = null

 @JvmField var withCast: Array<String?>? = null

 init {
  this.compileTimeConstant = 12
  this.stringLiteral = "Hello World"
  this.newArray = arrayOfNulls<Any>(4)
  this.newArrayMultidimensional = Array<Array<Array<Any?>?>?>(3) {
   arrayOfNulls<Array<Any?>>(4)
  }
  this.arrayLiteral = intArrayOf(1, 2, 3, 4)
  this.arrayLiteralMultidimensional = arrayOf<IntArray?>(intArrayOf(1, 2), intArrayOf(3, 4))
  this.classLiteral = WasmImmutableFields::class.javaObjectType
  this.withCast = (arrayOfNulls<Any>(0) as Any?) as Array<String?>?
 }
}

open class AssignmentsInConstructor {
 @JvmField var compileTimeConstant: Int = 0

 @JvmField var stringLiteral: String? = null

 @JvmField var newArray: Array<Any?>? = null

 @JvmField var newArrayMultidimensional: Array<Array<Array<Any?>?>?>? = null

 @JvmField var arrayLiteral: IntArray? = null

 @JvmField var arrayLiteralMultidimensional: Array<IntArray?>? = null

 @JvmField var classLiteral: Class<*>? = null

 @JvmField var withCast: Array<String?>? = null

 @JvmField var fromParameter: Any? = null

 @JvmField var finalFieldReference: String? = null

 constructor(parameter: Any?, intParameter: Int, par: AssignmentsInConstructor?) {
  this.compileTimeConstant = 12
  this.stringLiteral = "Hello World"
  this.newArray = arrayOfNulls<Any>(intParameter)
  this.newArrayMultidimensional = Array<Array<Array<Any?>?>?>(intParameter) {
   arrayOfNulls<Array<Any?>>(4)
  }
  this.arrayLiteral = intArrayOf(1, 2, intParameter, 4)
  this.arrayLiteralMultidimensional = arrayOf<IntArray?>(intArrayOf(1, intParameter), intArrayOf(3, 4))
  this.classLiteral = WasmImmutableFields::class.javaObjectType
  this.withCast = (arrayOfNulls<Any>(0) as Any?) as Array<String?>?
  this.fromParameter = parameter
  this.finalFieldReference = par!!.stringLiteral
 }
}

open class OptimizesWithThisConstructorDelegation {
 @JvmField var optimizeableField: Int = 0

 constructor() {
  this.optimizeableField = 2
 }

 constructor(parameter: Int) {
  this.optimizeableField = parameter
 }

 constructor(parameter: Short): this(parameter.toInt())
}

open class OptimizesWithSuperConstructorDelegation: OptimizesWithThisConstructorDelegation {
 constructor()

 constructor(parameter: Int): super(parameter)

 constructor(parameter: Short): this(parameter.toInt())
}

open class FinalizerTest {
 @JvmField var effectivelyFinalField: Int = 1

 @JvmField var readInInit: Int = this.effectivelyFinalField

 @JvmField var writtenOutsideConstructor: Int = 1

 @JvmField var readBeforeWrite: Int = 0

 @JvmField var writtenInDelegatingConstructor: Int = 1

 @JvmField var compoundAssignment: Int = 0

 @JvmField var effectivelyFinalButNotOptimizedIfBranches: Int = 0

 @JvmField var effectivelyFinalButNotOptimizedNestedBlock: Int = 0

 @JvmField var writtenInInitAndConstructor: Int = 1

 @JvmField var writtenInInitializerAndInDelegatingConstructor: Int = 1

 @JvmField var writtenOnlyInDelegatingConstructor: Int = 0

 constructor() {
  this.readBeforeWrite = this.readBeforeWrite + 1
  val i: Int = this.effectivelyFinalField
  this.compoundAssignment = this.compoundAssignment + 1
  if (i == 3) {
   this.effectivelyFinalButNotOptimizedIfBranches = 1
  } else {
   this.effectivelyFinalButNotOptimizedIfBranches = 1
  }
  this.effectivelyFinalButNotOptimizedNestedBlock = 1
  this.writtenInInitAndConstructor = 1
 }

 constructor(x: Int): this() {
  val i: Int = this.effectivelyFinalField
  this.writtenInDelegatingConstructor = 1
  this.writtenOnlyInDelegatingConstructor = 1
  this.writtenInInitializerAndInDelegatingConstructor = 1
 }

 open fun foo() {
  val o: FinalizerTest? = null
  o!!.writtenOutsideConstructor = 1
  val i: Int = this.effectivelyFinalField
 }
}
