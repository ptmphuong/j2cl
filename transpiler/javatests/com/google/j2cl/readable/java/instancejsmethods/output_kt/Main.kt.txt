// Generated from "instancejsmethods/Main.java"
package instancejsmethods

import javaemul.lang.*
import instancejsmethods.Child
import instancejsmethods.MyInterface
import instancejsmethods.Parent
import instancejsmethods.SuperParent
import kotlin.Int
import kotlin.jvm.JvmStatic

fun interface MyInterface {
 fun intfFoo(): Int
}

open class SuperParent {
 open fun `fun`(a: Int, b: Int): Int {
  return a + b + 111
 }

 open fun bar(a: Int, b: Int): Int {
  return a * b + 222
 }
}

open class Parent: SuperParent() {
 open override fun `fun`(a: Int, b: Int): Int {
  return a + b
 }

 open override fun bar(a: Int, b: Int): Int {
  return a * b
 }

 open fun foo(a: Int): Int {
  return a
 }
}

open class Child: MyInterface, Parent() {
 open override fun `fun`(a: Int, b: Int): Int {
  return a + b + 1
 }

 open override fun bar(a: Int, b: Int): Int {
  return a * b + 1
 }

 open override fun foo(a: Int): Int {
  return a
 }

 open override fun intfFoo(): Int {
  return 1
 }
}

open class Main {
 open fun testCallBySuperParent() {
  val sp: SuperParent? = SuperParent()
  val p: SuperParent? = Parent()
  val c: SuperParent? = Child()
  val pp: Parent? = Parent()
  val cc: Parent? = Child()
  val intf: MyInterface? = Child()
  sp!!.`fun`(12, 35)
  sp!!.bar(6, 7)
  p!!.`fun`(12, 35)
  p!!.bar(6, 7)
  c!!.`fun`(12, 35)
  c!!.bar(6, 7)
  pp!!.foo(1)
  cc!!.foo(1)
  intf!!.intfFoo()
 }

 companion object {
  @JvmStatic
  fun testCallByConcreteType() {
   val sp: SuperParent? = SuperParent()
   val p: Parent? = Parent()
   val c: Child? = Child()
   sp!!.`fun`(12, 35)
   sp!!.bar(6, 7)
   p!!.`fun`(12, 35)
   p!!.bar(6, 7)
   p!!.foo(1)
   c!!.`fun`(12, 35)
   c!!.bar(6, 7)
   c!!.foo(1)
   c!!.intfFoo()
  }
 }
}
