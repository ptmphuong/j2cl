// Generated from "lambdas/Lambdas.java"
package lambdas

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Double
import kotlin.Enum
import kotlin.Error
import kotlin.Int
import kotlin.Long
import kotlin.Number
import kotlin.String
import kotlin.Throwable
import kotlin.Unit
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.let
import lambdas.Lambdas

open class Lambdas {
 @JvmField var field: Int = 100

 open fun call(intf: Lambdas.FunctionalInterface?, n: Int): Int {
  return this.field + intf!!.m(n)
 }

 open fun testLambdaExpressionStyle() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface i + 1
  }, 10)
 }

 open fun testLambdaBlockStyle() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface i + 2
  }, 10)
 }

 open fun testLambdaCaptureField() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface this.field + i + 1
  }, 10)
 }

 open fun testLambdaCaptureLocal() {
  val x: Int = 1
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface x + i + 1
  }, 10)
 }

 open fun testLambdaCaptureFieldAndLocal() {
  val x: Int = 1
  this.call(Lambdas.FunctionalInterface { i: Int ->
   val y: Int = 1
   return@FunctionalInterface x + y + this.field + i + 1
  }, 10)
 }

 open fun funOuter() {}

 open fun testLambdaCallOuterFunction() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   this.funOuter()
   this.funOuter()
   this@Lambdas.funOuter()
   return@FunctionalInterface i + 2
  }, 10)
 }

 open fun testNestedLambdas() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface this.call(Lambdas.FunctionalInterface { j: Int ->
    return@FunctionalInterface j
   }, 20)
  }, 10)
 }

 open fun testReturnLabelNameConflictKotlin() {
  this.call(Lambdas.FunctionalInterface { i: Int ->
   return@FunctionalInterface i
  }, 10)
 }

 open fun <T> testInstanceMethodTypeVariableThroughLambda() {
  val wrapped: Lambdas.Functional<T>? = Lambdas.Functional<T> { f: Lambdas.Functional<T>? ->
   return@Functional object : Lambdas.Functional<T> {
    open override fun wrap(f: Lambdas.Functional<T>?): Lambdas.Functional<T>? {
     return null
    }
   }
  }
 }

 open fun <T> callWithTypeVariable(intf: Lambdas.GenericFunctionalInterface<T>?, e: T): T {
  return intf!!.m(e)
 }

 open fun callParameterized(intf: Lambdas.GenericFunctionalInterface<Error?>?, e: Error?): Error? {
  return intf!!.m(e)
 }

 open fun <T> callWithBiFunction(fn: Lambdas.BiFunction<T, String?, Double?>?): Lambdas.GenericFunctionalInterface<T>? {
  return null
 }

 open fun <T: Enum<T>> testLambdaWithGenerics() {
  this.callWithTypeVariable<Error?>(Lambdas.GenericFunctionalInterface<Error?> { i: Error? ->
   return@GenericFunctionalInterface i
  }, java.lang.Error())
  this.callParameterized(Lambdas.GenericFunctionalInterface<Error?> { i_1: Error? ->
   return@GenericFunctionalInterface i_1
  }, java.lang.Error())
  Lambdas.callTypeVariableWithBounds<T>(Lambdas.GenericFunctionalInterface<Enum<T>?> { i_2: Enum<T>? ->
   return@GenericFunctionalInterface i_2
  }, null as Enum<T>?)
  this.callWithBiFunction<Any?>(Lambdas.BiFunction<Any?, String?, Double?> { x: Any?, y: String? ->
   throw RuntimeException()
  })
  val f: Lambdas.Function<in T, *>? = Lambdas.Function { item: T ->
   return@Function Long.valueOf(1L)
  }
 }

 open fun testLambdaReturningVoidAsExpression() {
  val runner: Lambdas.FunctionalInterfaceWithMethodReturningVoid? = Lambdas.FunctionalInterfaceWithMethodReturningVoid {
   Any()
  }
 }

 open fun testAnonymousInsideLambda() {
  val runner: Lambdas.FunctionalInterfaceWithMethodReturningVoid? = Lambdas.FunctionalInterfaceWithMethodReturningVoid {
   object : Any() {}
  }
 }

 open fun testDefaultMethodsInIntersectionAdaptor() {
  val o: Any? = (Lambdas.BiFunction<String?, String?, String?> { t: String?, u: String? ->
   return@BiFunction null
  }).let { it as Lambdas.BiFunction<String?, String?, String?>?; it as Lambdas.MarkerWithDefaultMethod?; it }
 }

 companion object {
  @JvmStatic
  fun testLambdaInStaticContext() {
   val f: Lambdas.FunctionalInterface? = Lambdas.FunctionalInterface { i: Int ->
    return@FunctionalInterface i
   }
  }

  @JvmStatic
  fun <T> testStaticMethodTypeVariableThroughLambda() {
   val wrapped: Lambdas.Functional<T>? = Lambdas.Functional<T> { f: Lambdas.Functional<T>? ->
    return@Functional object : Lambdas.Functional<T> {
     open override fun wrap(f: Lambdas.Functional<T>?): Lambdas.Functional<T>? {
      return null
     }
    }
   }
  }

  @JvmStatic
  fun <T: Enum<T>> callTypeVariableWithBounds(intf: Lambdas.GenericFunctionalInterface<Enum<T>?>?, e: Enum<T>?): Enum<T>? {
   return intf!!.m(e)
  }

  @JvmStatic
  fun m(): Any? {
   return null
  }

  @JvmStatic
  fun testLambdaCallingStaticMethod() {
   val f: Lambdas.Function<Any?, *>? = Lambdas.Function { l: Any? ->
    return@Function Lambdas.m()
   }
  }

  @JvmField var identityFunction_private_2: Lambdas.IdentityFunction? = null

  @JvmStatic
  fun <E> identity(): Lambdas.GenericJsFunction<E, E>? {
   if (Lambdas.identityFunction_private_2 == null) {
    Lambdas.identityFunction_private_2 = Lambdas.IdentityFunction()
   }
   return Lambdas.identityFunction_private_2 as Lambdas.GenericJsFunction<E, E>?
  }

  @JvmStatic
  fun testJsInteropLambdas() {
   val thenable: Lambdas.Thenable<String?>? = Lambdas.Thenable<String?> { f1: Lambdas.GenericJsFunction<Unit?, String?>?, f2: Lambdas.GenericJsFunction<Unit?, Throwable?>? ->
    f1!!.apply(null)
   }
   val otherThenable: Lambdas.AnotherThenable<String?>? = Lambdas.AnotherThenable<String?> { f1_1: Lambdas.GenericJsFunction<Unit?, String?>?, f2_1: Lambdas.GenericJsFunction<Unit?, Throwable?>? ->
    f1_1!!.apply(null)
   }
   val stringJsSupplier: Lambdas.JsSupplier<Int?>? = Lambdas.JsSupplier<Int?> {
    return@JsSupplier Int.valueOf(1)
   }
   stringJsSupplier!!.get()
   val equals: Lambdas.Equals<Any?>? = stringJsSupplier as Lambdas.Equals<Any?>?
   equals!!.equals(null)
   equals!!.get()
  }

  @JvmStatic
  fun <U, V> testIntersectionTyping() {
   var o: Any? = (Lambdas.GenericFunctionalInterface<String?> { x: String? ->
    return@GenericFunctionalInterface x
   }).let { it as Lambdas.GenericFunctionalInterface<String?>?; it as Lambdas.JustADefaultT<Number?>?; it }
   o = (Lambdas.GenericFunctionalInterface<String?> { x_1: String? ->
    return@GenericFunctionalInterface x_1
   }).let { it as Lambdas.GenericFunctionalInterface<String?>?; it as Lambdas.JustADefaultS<Number?>?; it }
   o = (Lambdas.GenericFunctionalInterface<U> { x_2: U ->
    return@GenericFunctionalInterface x_2
   }).let { it as Lambdas.GenericFunctionalInterface<U>?; it as Lambdas.JustADefaultS<V>?; it }
  }
 }

 fun interface FunctionalInterface {
  fun m(i: Int): Int
 }

 fun interface Functional<T> {
  fun wrap(f: Lambdas.Functional<T>?): Lambdas.Functional<T>?
 }

 fun interface GenericFunctionalInterface<T> {
  fun m(i: T): T
 }

 fun interface BiFunction<T, U, R> {
  fun apply(t: T, u: U): R

  fun <V> andThen(after: Lambdas.Function<in R, out V>?): Lambdas.BiFunction<T, U, V>? {
   return Lambdas.BiFunction<T, U, V> { t: T, u: U ->
    return@BiFunction after!!.apply(this.apply(t, u))
   }
  }
 }

 fun interface Function<T, R> {
  fun apply(t: T): R

  companion object {
   @JvmStatic
   fun <T> identity(): Lambdas.Function<T, T>? {
    return Lambdas.Function<T, T> { t: T ->
     return@Function t
    }
   }
  }
 }

 fun interface FunctionalInterfaceWithMethodReturningVoid {
  fun run()
 }

 open class Parent {
  @JvmField var fieldInParent: Int = 0

  open fun funInParent() {}
 }

 open class LambdaInSubClass: Lambdas.Parent() {
  open fun testLambdaInSubclass() {
   val l: Lambdas.FunctionalInterface? = Lambdas.FunctionalInterface { i: Int ->
    this.funInParent()
    this.funInParent()
    this@LambdaInSubClass.funInParent()
    var a: Int = this.fieldInParent
    a = this.fieldInParent
    a = this@LambdaInSubClass.fieldInParent
    return@FunctionalInterface a
   }
  }
 }

 fun interface GenericJsFunction<R, T> {
  fun apply(t: T): R
 }

 fun interface Thenable<T> {
  fun then(f1: Lambdas.GenericJsFunction<Unit?, T>?, f2: Lambdas.GenericJsFunction<Unit?, Throwable?>?)
 }

 fun interface AnotherThenable<T> {
  fun then(f1: Lambdas.GenericJsFunction<Unit?, T>?, f2: Lambdas.GenericJsFunction<Unit?, Throwable?>?)
 }

 class IdentityFunction: Lambdas.GenericJsFunction<Any?, Any?> {
  open override fun apply(o: Any?): Any? {
   return o
  }
 }

 interface Equals<T> {
  fun get(): T {
   return null as T
  }
 }

 fun interface JsSupplier<T: Number?>: Lambdas.Equals<T> {
  override fun get(): T
 }

 interface JustADefaultT<T> {
  fun method(t: T) {}
 }

 interface JustADefaultS<S> {
  fun method(t: S) {}
 }

 interface MarkerWithDefaultMethod {
  fun defaultMethod() {}
 }
}
