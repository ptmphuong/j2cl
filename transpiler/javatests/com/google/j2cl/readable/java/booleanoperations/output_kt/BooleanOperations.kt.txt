// Generated from "booleanoperations/BooleanOperations.java"
package booleanoperations

import javaemul.lang.*
import booleanoperations.BooleanOperations
import kotlin.Boolean
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.run

open class BooleanOperations {
 open fun test() {
  var ls: Boolean = true
  val rs: Boolean = true
  var r: Boolean = true
  val t: Boolean = !!!true
  r = ls == rs
  r = ls != rs
  r = ls.xor(rs)
  r = ls.and(rs)
  r = ls.or(rs)
  r = ls && rs
  r = ls || rs
  r = run {
   ls = rs
   ls
  }
  r = r.xor(rs)
  r = r.and(rs)
  r = r.or(rs)
  BooleanOperations.acceptBoolean_private_2(ls == rs)
  BooleanOperations.acceptBoolean_private_2(ls != rs)
  BooleanOperations.acceptBoolean_private_2(ls.xor(rs))
  BooleanOperations.acceptBoolean_private_2(ls.and(rs))
  BooleanOperations.acceptBoolean_private_2(ls.or(rs))
  BooleanOperations.acceptBoolean_private_2(ls && rs)
  BooleanOperations.acceptBoolean_private_2(ls || rs)
  BooleanOperations.acceptBoolean_private_2(run {
   ls = rs
   ls
  })
  var br: Boolean? = null
  br = Boolean.valueOf(ls == rs)
  br = Boolean.valueOf(ls != rs)
  br = Boolean.valueOf(ls.xor(rs))
  br = Boolean.valueOf(ls.and(rs))
  br = Boolean.valueOf(ls.or(rs))
  br = Boolean.valueOf(ls && rs)
  br = Boolean.valueOf(ls || rs)
  br = Boolean.valueOf(run {
   ls = rs
   ls
  })
  if (ls == rs) {
   r = true
  }
  if (ls != rs) {
   r = true
  }
  if (ls.xor(rs)) {
   r = true
  }
  if (ls.and(rs)) {
   r = true
  }
  if (ls.or(rs)) {
   r = true
  }
  if (ls && rs) {
   r = true
  }
  if (ls || rs) {
   r = true
  }
  open class ___1Outer {
   @JvmField var b: Boolean = false

   open inner class Inner {
    init {
     this@___1Outer.b = this@___1Outer.b.or(true)
    }
   }
  }
  val finalOuter: ___1Outer? = ___1Outer()
  finalOuter!!.b = finalOuter!!.b.or(true)
  var outer: ___1Outer? = ___1Outer()
  outer!!.b = outer!!.b.or(run {
   outer = null
   outer
  } == null)
 }

 companion object {
  @JvmStatic
  fun acceptBoolean_private_2(b: Boolean) {}
 }
}
