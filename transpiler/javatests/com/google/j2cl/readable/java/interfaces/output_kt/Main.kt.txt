// Generated from "interfaces/Main.java"
package interfaces

import javaemul.lang.*
import interfaces.Main
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.run

open class Main {
 open fun testInterfaceMembers() {
  val i: Main.Interface<String?>? = Implementor()
  i!!.interfaceMethod()
  i!!.defaultMethod(null)
  Main.Interface.staticInterfaceMethod()
  val x: Int = run {
   Implementor()
   Main.Interface.a
  } + Main.Interface.b
 }

 fun interface Interface<T> {
  fun interfaceMethod()

  fun defaultMethod(t: T) {
   this.privateMethod_private_interfaces_Main_Interface(t)
  }

  fun privateMethod_private_interfaces_Main_Interface(t: T) {}

  companion object {
   @JvmField val a: Int = 1

   @JvmField val b: Int = 2

   @JvmStatic
   fun staticInterfaceMethod() {}
  }
 }

 fun interface SubInterface: Main.Interface<String?> {
  override fun defaultMethod(s: String?) {
   super<Main.Interface>.defaultMethod(s)
  }
 }

 open inner class Implementor: Main.SubInterface, Main.Interface<String?> {
  open override fun interfaceMethod() {}
 }

 abstract inner class AbstractImplementor: Main.SubInterface {}
}
