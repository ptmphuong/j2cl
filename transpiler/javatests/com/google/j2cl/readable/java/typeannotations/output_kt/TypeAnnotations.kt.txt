// Generated from "typeannotations/TypeAnnotations.java"
package typeannotations

import javaemul.lang.*
import kotlin.String
import kotlin.collections.ArrayList
import kotlin.collections.MutableList
import kotlin.jvm.JvmStatic
import typeannotations.AbstractType
import typeannotations.ParametricType
import typeannotations.Parent

abstract class AbstractType: ParametricType<AbstractType?> {}

abstract class AbstractTypeNonNull: ParametricType<AbstractType> {}

open class Parent {
 open fun m(s: String, c: Parent?): Parent? {
  return c
 }

 open fun m(l: MutableList<String>?, c: Parent?): MutableList<Parent>? {
  return ArrayList<Parent>()
 }
}

open class ChildWithNullableParent: ParametricType<Parent?>, Parent() {}

open class ChildWithNonNullableParent: ParametricType<Parent>, Parent() {}

open class TypeAnnotations {
 companion object {
  @JvmStatic
  fun main() {
   val list: MutableList<String>? = ArrayList<String>()
  }
 }
}
