// Generated from "varargs/Varargs.java"
package varargs

import javaemul.lang.*
import java.io.Serializable
import kotlin.Any
import kotlin.Array
import kotlin.Cloneable
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import varargs.Varargs

open class Varargs {
 @JvmField var args_private_2: Array<Any?>? = null

 constructor(vararg args: Int)

 constructor(): this(1)

 open fun test(a: Int, vararg args: Any?) {
  val args_1: Array<Any?>? = args as Array<Any?>?
 }

 open fun testCloneable(vararg args: Cloneable?) {
  val args_1: Array<Cloneable?>? = args as Array<Cloneable?>?
 }

 open fun testSerializable(vararg args: Serializable?) {
  val args_1: Array<Serializable?>? = args as Array<Serializable?>?
 }

 open fun testAssignment(vararg args: Any?) {
  val args_1: Array<Any?>? = args as Array<Any?>?
  this.args_private_2 = args_1 as Array<Any?>?
 }

 open fun testLambda(functionalInterface: Varargs.FunctionalInterface?) {}

 open fun main() {
  val v: Varargs? = Varargs()
  v!!.test(1)
  v!!.test(1, Any())
  v!!.test(1, Any())
  v!!.test(1)
  v!!.test(1)
  v!!.testCloneable()
  v!!.testSerializable()
  v!!.testLambda(Varargs.FunctionalInterface { it: Array<out String?>? ->
   val it_1: Array<String?>? = it as Array<String?>?
   this.args_private_2 = it_1 as Array<Any?>?
  })
 }

 companion object {
  @JvmStatic
  fun <T> `fun`(vararg elements: T) {
   val elements_1: Array<T>? = elements as Array<T>?
  }

  @JvmStatic
  fun <E> bar(a: E, b: E) {
   Varargs.`fun`<E>(a, b)
  }
 }

 fun interface FunctionalInterface {
  fun apply(vararg strings: String?)
 }
}

open class Child: Varargs {
 constructor(): super(1)
}
