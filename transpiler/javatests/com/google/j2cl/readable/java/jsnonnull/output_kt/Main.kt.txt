// Generated from "jsnonnull/Main.java"
package jsnonnull

import javaemul.lang.*
import java.util.Comparator
import jsnonnull.Main
import kotlin.Any
import kotlin.Array
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.arrayOf
import kotlin.collections.ArrayList
import kotlin.collections.MutableList
import kotlin.jvm.JvmField

open class Main {
 @JvmField var f1_private_2: String = "Hello"

 @JvmField var f2_private_2: String? = null

 @JvmField var f4_private_2: MutableList<String> = ArrayList<String>()

 @JvmField var f5_private_2: MutableList<String>? = ArrayList<String>()

 @JvmField var f6_private_2: MutableList<String?> = ArrayList<String>() as MutableList<String?>

 @JvmField var f7_private_2: MutableList<String?>? = null

 @JvmField var f8_private_2: Array<String> = arrayOf<String>()

 @JvmField var f9_private_2: Array<String?> = arrayOf<String?>()

 @JvmField var f10_private_2: Array<String>? = arrayOf<String>()

 @JvmField var f12_private_2: MutableList<String?>? = ArrayList<String>() as MutableList<String?>?

 constructor(a: String)

 open fun m1(a: String, b: MutableList<Double>, c: String?): String {
  return ""
 }

 open fun m2(a: String?, b: MutableList<Double>): String? {
  return ""
 }

 open fun m3(a: String, vararg args: String): String? {
  val args_1: Array<String>? = args as Array<String>?
  return null
 }

 open fun m4(f: Main.MyFunction) {}

 fun interface MyFunction {
  fun x(a: String): String
 }

 open class StringComparator: Comparator<String> {
  open override fun compare(a: String, b: String): Int {
   return 0
  }
 }

 open class NullableStringComparator: Comparator<String?> {
  open override fun compare(a: String?, b: String?): Int {
   return 0
  }
 }

 open class NonNullableStringSubNullableComparator: Main.NullableStringComparator() {
  open override fun compare(a: String, b: String): Int {
   return 0
  }
 }

 interface NonNullableTemplatedReturn<T> {
  fun get(): T

  fun getArray(): Array<T>?
 }

 interface NonNullableTemplate<T: Any> {
  fun get(): T

  fun getArray(): Array<T>?
 }
}
