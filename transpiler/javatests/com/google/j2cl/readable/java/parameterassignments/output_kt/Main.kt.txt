// Generated from "parameterassignments/Main.java"
package parameterassignments

import javaemul.lang.*
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.IntArray
import kotlin.arrayOf
import kotlin.intArrayOf
import kotlin.jvm.JvmField
import parameterassignments.Main

open class Main {
 constructor(nonFinal: Int, explicitFinal: Int, implicitFinal: Int): this(nonFinal, explicitFinal, implicitFinal, true) {
  var nonFinal_1: Int = nonFinal
  nonFinal_1 = nonFinal_1 + explicitFinal + implicitFinal
 }

 constructor(nonFinal: Int, explicitFinal: Int, implicitFinal: Int, flag: Boolean) {
  var nonFinal_1: Int = nonFinal
  nonFinal_1 = nonFinal_1 + explicitFinal + implicitFinal
 }

 open fun test(nonFinal: Int, explicitFinal: Int, implicitFinal: Int): Int {
  var nonFinal_1: Int = nonFinal
  nonFinal_1 = nonFinal_1 + explicitFinal + implicitFinal
  return nonFinal_1
 }

 open fun testObjectVarargs(o: Any?, vararg oa: Any?) {
  var oa_1: Array<Any?>? = oa as Array<Any?>?
  oa_1 = (arrayOf<Any?>(o, oa_1!![0]) as Array<*>?) as Array<Any?>?
 }

 open fun testPrimitiveVarargs(i: Int, vararg ia: Int) {
  var ia_1: IntArray? = ia
  ia_1 = intArrayOf(i, ia_1!![0])
 }

 @JvmField val fn: Main.Fn? = Main.Fn { nonFinal: Int, implicitFinal: Int ->
  var nonFinal_1: Int = nonFinal
  nonFinal_1 = nonFinal_1 + implicitFinal
  return@Fn nonFinal_1
 }

 @JvmField val fnPrimitiveVarargs: Main.FnPrimitiveVarargs? = Main.FnPrimitiveVarargs { i: Int, `is`: IntArray? ->
  `is`!![0] = `is`!![1]
 }

 @JvmField val fnObjectVarargs: Main.FnObjectVarargs? = Main.FnObjectVarargs { o: Any?, os: Array<*>? ->
  val os_1: Array<Any?>? = os as Array<Any?>?
  os_1!![0] = os_1!![1]
 }

 fun interface Fn {
  fun test(nonFinal: Int, implicitFinal: Int): Int
 }

 fun interface FnPrimitiveVarargs {
  fun test(i: Int, vararg `is`: Int)
 }

 fun interface FnObjectVarargs {
  fun test(o: Any?, vararg os: Any?)
 }

 open class SubMain: Main {
  constructor(nonFinal: Int, explicitFinal: Int, implicitFinal: Int): super(nonFinal, explicitFinal, implicitFinal) {
   var nonFinal_1: Int = nonFinal
   nonFinal_1 = nonFinal_1 + explicitFinal + implicitFinal
  }

  open override fun test(nonFinal: Int, explicitFinal: Int, implicitFinal: Int): Int {
   var nonFinal_1: Int = nonFinal
   nonFinal_1 = nonFinal_1 + explicitFinal + implicitFinal
   return super<Main>.test(nonFinal_1, explicitFinal, implicitFinal)
  }
 }
}
