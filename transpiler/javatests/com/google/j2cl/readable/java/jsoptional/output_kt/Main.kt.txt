// Generated from "jsoptional/Main.java"
package jsoptional

import javaemul.lang.*
import jsoptional.Main
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField

open class Main {
 open fun method1(i1: Int, d: Double?, i: Int?) {}

 open fun method2(s1: String?, d: Double?, vararg i: Boolean?) {
  val i_1: Array<Boolean?>? = i as Array<Boolean?>?
 }

 @JvmField var f: Main.Function? = Main.Function { s: String?, varargs: Array<*>? ->
  val varargs_1: Array<Any?>? = varargs as Array<Any?>?
  return@Function s
 }

 constructor(a: String?)

 open fun testFunction(f: Main.Function?) {}

 open fun testOptionalFunction(f: Main.Function?) {}

 fun interface Function {
  fun f1(s: String?, vararg args: Any?): Any?
 }

 class AFunction: Main.Function {
  open override fun f1(i: String?, vararg args: Any?): Any? {
   val args_1: Array<Any?>? = args as Array<Any?>?
   return args_1!![0]
  }
 }

 fun interface I<T> {
  fun m(t: T, o: Any?)
 }

 open class TemplatedSubtype<T: String?>: Main.I<T> {
  open override fun m(t: T, o: Any?) {}
 }

 open inner class SpecializedSubtype: Main.I<String?> {
  constructor(a: Any?)

  open override fun m(t: String?, o: Any?) {}
 }

 open class NonJsTypeSubtype: Main.I<String?> {
  open override fun m(t: String?, o: Any?) {}
 }
}
