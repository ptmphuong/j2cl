// Generated from "nullability/explicitnotnullable/ExplicitNotNullable.java"
package nullability.explicitnotnullable

import javaemul.lang.*
import kotlin.jvm.*

open class ExplicitNotNullable {
 @kotlin.jvm.JvmField var f1_private_2: kotlin.String = "Hello"

 @kotlin.jvm.JvmField var f2_private_2: kotlin.String? = null

 @kotlin.jvm.JvmField var f3_private_2: kotlin.String? = null

 @kotlin.jvm.JvmField var f4_private_2: kotlin.collections.MutableList<kotlin.String> = kotlin.collections.ArrayList<kotlin.String?>() as kotlin.collections.MutableList<kotlin.String>

 @kotlin.jvm.JvmField var f5_private_2: kotlin.collections.MutableList<kotlin.String>? = kotlin.collections.ArrayList<kotlin.String?>() as kotlin.collections.MutableList<kotlin.String>?

 @kotlin.jvm.JvmField var f6_private_2: kotlin.collections.MutableList<kotlin.String?> = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f7_private_2: kotlin.collections.MutableList<kotlin.String?>? = null

 @kotlin.jvm.JvmField var f8_private_2: kotlin.Array<kotlin.String> = kotlin.arrayOf<kotlin.String?>() as kotlin.Array<kotlin.String>

 @kotlin.jvm.JvmField var f9_private_2: kotlin.Array<kotlin.String?> = kotlin.arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f10_private_2: kotlin.Array<kotlin.String>? = kotlin.arrayOf<kotlin.String?>() as kotlin.Array<kotlin.String>?

 @kotlin.jvm.JvmField var f11_private_2: kotlin.Unit? = null

 @kotlin.jvm.JvmField var f12_private_2: kotlin.Any = kotlin.Any()

 @kotlin.jvm.JvmField var f13_private_2: kotlin.Any

 @kotlin.jvm.JvmField var f14_private_2: kotlin.Any? = null

 @kotlin.jvm.JvmField var f15_private_2: kotlin.Array<kotlin.Array<kotlin.String>> = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>() as kotlin.Array<kotlin.Array<kotlin.String>>

 @kotlin.jvm.JvmField var f16_private_2: kotlin.Array<kotlin.Array<kotlin.String>?> = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>() as kotlin.Array<kotlin.Array<kotlin.String>?>

 @kotlin.jvm.JvmField var f17_private_2: kotlin.Array<kotlin.Array<kotlin.String>>? = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>() as kotlin.Array<kotlin.Array<kotlin.String>>?

 @kotlin.jvm.JvmField var f18_private_2: kotlin.Array<kotlin.Array<kotlin.String>?>? = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>() as kotlin.Array<kotlin.Array<kotlin.String>?>?

 @kotlin.jvm.JvmField var f19_private_2: kotlin.Array<kotlin.Array<kotlin.String?>> = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>() as kotlin.Array<kotlin.Array<kotlin.String?>>

 @kotlin.jvm.JvmField var f20_private_2: kotlin.Array<kotlin.Array<kotlin.String?>?> = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>()

 @kotlin.jvm.JvmField var f21_private_2: kotlin.Array<kotlin.Array<kotlin.String?>>? = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>() as kotlin.Array<kotlin.Array<kotlin.String?>>?

 @kotlin.jvm.JvmField var f22_private_2: kotlin.Array<kotlin.Array<kotlin.String?>?>? = kotlin.arrayOf<kotlin.Array<kotlin.String?>?>()

 @kotlin.jvm.JvmField var f23_private_2: kotlin.Array<kotlin.CharArray> = kotlin.arrayOf<kotlin.CharArray?>() as kotlin.Array<kotlin.CharArray>

 @kotlin.jvm.JvmField var f24_private_2: kotlin.Array<kotlin.CharArray?> = kotlin.arrayOf<kotlin.CharArray?>()

 @kotlin.jvm.JvmField var f25_private_2: kotlin.Array<kotlin.CharArray>? = kotlin.arrayOf<kotlin.CharArray?>() as kotlin.Array<kotlin.CharArray>?

 @kotlin.jvm.JvmField var f26_private_2: kotlin.Array<kotlin.CharArray?>? = kotlin.arrayOf<kotlin.CharArray?>()

 constructor() {
  this.f13_private_2 = kotlin.Any()
 }

 open fun m1(a: kotlin.String, b: kotlin.collections.MutableList<kotlin.Double>): kotlin.String {
  return ""
 }

 open fun m2(a: kotlin.String?, b: kotlin.collections.MutableList<kotlin.Double?>): kotlin.String? {
  return null
 }

 open fun m3(vararg args: kotlin.String) {}

 open fun <T: nullability.explicitnotnullable.ExplicitNotNullable.NullableBound<T>?> methodWithNullableBound() {}

 open fun <T: nullability.explicitnotnullable.ExplicitNotNullable.NonNullableBound<T>> methodWithNonNullableBound() {}

 @kotlin.jvm.JvmField var collection: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<*>? = null

 @kotlin.jvm.JvmField var nonNullableCollection: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<*>? = null

 open fun unboundedWildCard(c: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<*>, nc: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<*>) {
  this.collection = c
  this.nonNullableCollection = nc
 }

 open fun testDependentWildcards(x: nullability.explicitnotnullable.ExplicitNotNullable.DependentTypeParameters<*, *>): nullability.explicitnotnullable.ExplicitNotNullable.DependentTypeParameters<*, *> {
  return x
 }

 companion object {
  @kotlin.jvm.JvmStatic
  fun <N> genericNullableMethod(o: nullability.explicitnotnullable.ExplicitNotNullable.ParameterizedNullable<N>, n: N?) {
   o!!.setNullable(n)
   o!!.setNonNull(n as N)
   o!!.setDefaultNullability(n as N)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n as N
   o!!.defaultNullability = n as N
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun <N: kotlin.Any> genericNonNullMethod(o: nullability.explicitnotnullable.ExplicitNotNullable.ParameterizedNonNullable<N>, n: N) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun <N: kotlin.Any> genericDefaultNullabilityMethod(o: nullability.explicitnotnullable.ExplicitNotNullable.ParameterizedDefaultNullability<N>, n: N) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedNullableMethod(o: nullability.explicitnotnullable.ExplicitNotNullable.ParameterizedNullable<kotlin.String?>, s: kotlin.String?) {
   o!!.setNullable(s)
   o!!.setNonNull(s!!)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s!!
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedNonNullMethod(o: nullability.explicitnotnullable.ExplicitNotNullable.ParameterizedNonNullable<kotlin.String>, s: kotlin.String) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedDefaultNullabilityMethod(o: nullability.explicitnotnullable.ExplicitNotNullable.ParameterizedDefaultNullability<kotlin.String>, s: kotlin.String) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun testListOfWildcard(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityObject(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNullableObject(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNonNullObject(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityString(l: kotlin.collections.MutableList<out kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNullableString(l: kotlin.collections.MutableList<out kotlin.String?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNonNullString(l: kotlin.collections.MutableList<out kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardExtendsDefaultNullabilityVariable(l: kotlin.collections.MutableList<out T>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardExtendsNullableVariable(l: kotlin.collections.MutableList<out T?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityObject(l: kotlin.collections.MutableList<in kotlin.Any>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNullableObject(l: kotlin.collections.MutableList<in kotlin.Any?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNonNullObject(l: kotlin.collections.MutableList<in kotlin.Any>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityString(l: kotlin.collections.MutableList<in kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNullableString(l: kotlin.collections.MutableList<in kotlin.String?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNonNullString(l: kotlin.collections.MutableList<in kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardSuperDefaultNullabilityVariable(l: kotlin.collections.MutableList<in T>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardSuperNullableVariable(l: kotlin.collections.MutableList<in T?>) {}

  @kotlin.jvm.JvmStatic
  fun testLambdaNullability() {
   val lambda: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<kotlin.String>? = nullability.explicitnotnullable.ExplicitNotNullable.Consumer { s: kotlin.String ->
   } as nullability.explicitnotnullable.ExplicitNotNullable.Consumer<kotlin.String>?
   val nullable: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<kotlin.String>? = nullability.explicitnotnullable.ExplicitNotNullable.Consumer { arg0: kotlin.String ->
    nullability.explicitnotnullable.DefaultNullable.nullableAccept(arg0)
   } as nullability.explicitnotnullable.ExplicitNotNullable.Consumer<kotlin.String>?
   val nonNullable: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<kotlin.String>? = nullability.explicitnotnullable.ExplicitNotNullable.Consumer { arg0_1: kotlin.String ->
    nullability.explicitnotnullable.ExplicitNotNullable.nonNullableAccept(arg0_1)
   } as nullability.explicitnotnullable.ExplicitNotNullable.Consumer<kotlin.String>?
   val newObject: nullability.explicitnotnullable.ExplicitNotNullable.Supplier<kotlin.Any>? = nullability.explicitnotnullable.ExplicitNotNullable.Supplier {
    return@Supplier kotlin.Any()
   } as nullability.explicitnotnullable.ExplicitNotNullable.Supplier<kotlin.Any>?
   val newArray: nullability.explicitnotnullable.ExplicitNotNullable.IntFunction<kotlin.Array<kotlin.Any>>? = nullability.explicitnotnullable.ExplicitNotNullable.IntFunction { arg0_2: kotlin.Int ->
    return@IntFunction kotlin.arrayOfNulls<kotlin.Any>(arg0_2) as kotlin.Array<kotlin.Any>
   } as nullability.explicitnotnullable.ExplicitNotNullable.IntFunction<kotlin.Array<kotlin.Any>>?
  }

  @kotlin.jvm.JvmStatic
  fun nonNullableAccept(s: kotlin.String) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> consume(t: T) {}

  @kotlin.jvm.JvmStatic
  fun testUnboundWildcardTypeArgumentInference(c: nullability.explicitnotnullable.ExplicitNotNullable.Consumer<*>) {
   nullability.explicitnotnullable.ExplicitNotNullable.consume<nullability.explicitnotnullable.ExplicitNotNullable.Consumer<*>>(c)
  }
 }

 interface NullableBound<T: nullability.explicitnotnullable.ExplicitNotNullable.NullableBound<T>?> {}

 interface NonNullableBound<T: nullability.explicitnotnullable.ExplicitNotNullable.NonNullableBound<T>> {}

 interface NullableBoundWithNonNullArgument: nullability.explicitnotnullable.ExplicitNotNullable.NullableBound<nullability.explicitnotnullable.ExplicitNotNullable.NullableBoundWithNonNullArgument> {}

 interface NullableBoundWithNullableArgument: nullability.explicitnotnullable.ExplicitNotNullable.NullableBound<nullability.explicitnotnullable.ExplicitNotNullable.NullableBoundWithNullableArgument?> {}

 interface NonNullBoundWithNonNullArgument: nullability.explicitnotnullable.ExplicitNotNullable.NonNullableBound<nullability.explicitnotnullable.ExplicitNotNullable.NonNullBoundWithNonNullArgument> {}

 interface NonNullBoundWithNullableArgument: nullability.explicitnotnullable.ExplicitNotNullable.NonNullableBound<nullability.explicitnotnullable.ExplicitNotNullable.NonNullBoundWithNullableArgument> {}

 open class ParameterizedDefaultNullability<N: kotlin.Any> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw java.lang.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNullable<N> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N = null as N

  @kotlin.jvm.JvmField var defaultNullability: N = null as N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw java.lang.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNonNullable<N: kotlin.Any> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw java.lang.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 fun interface Consumer<T> {
  fun accept(t: T)
 }

 fun interface Supplier<T> {
  fun get(): T
 }

 fun interface IntFunction<T> {
  fun accept(i: kotlin.Int): T
 }

 open class DependentTypeParameters<E: kotlin.Any, T: E?> {
  open fun getThis(): nullability.explicitnotnullable.ExplicitNotNullable.DependentTypeParameters<E, T> {
   return this
  }
 }
}

open class DefaultNullable {
 companion object {
  @kotlin.jvm.JvmStatic
  fun nullableAccept(s: kotlin.String?) {}
 }
}
