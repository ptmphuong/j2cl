// Generated from "nullability/defaultnotnullable/DefaultNotNullable.java"
package nullability.defaultnotnullable

import javaemul.lang.*
import java.lang.RuntimeException
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Unit
import kotlin.arrayOf
import kotlin.collections.ArrayList
import kotlin.collections.MutableList
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import nullability.defaultnotnullable.DefaultNotNullable

open class DefaultNotNullable {
 @JvmField var f1_private_2: String = "Hello"

 @JvmField var f2_private_2: String? = null

 @JvmField var f3_private_2: String? = null

 @JvmField var f4_private_2: MutableList<String> = ArrayList<String>()

 @JvmField var f5_private_2: MutableList<String>? = ArrayList<String>()

 @JvmField var f6_private_2: MutableList<String?> = ArrayList<String?>()

 @JvmField var f7_private_2: MutableList<String?>? = null

 @JvmField var f8_private_2: Array<String> = arrayOf<String?>() as Array<String>

 @JvmField var f9_private_2: Array<String?> = arrayOf<String?>()

 @JvmField var f10_private_2: Array<String>? = arrayOf<String?>() as Array<String>?

 @JvmField var f11_private_2: Unit? = null

 @JvmField var f12_private_2: Any = Any()

 @JvmField var f13_private_2: Any

 @JvmField var f14_private_2: Any? = null

 constructor() {
  this.f13_private_2 = Any()
 }

 open fun m1(a: String, b: MutableList<Double>): String {
  return ""
 }

 open fun m2(a: String?, b: MutableList<Double?>): String? {
  return null
 }

 open fun m3(vararg args: String) {
  val args_1: Array<String> = args as Array<String>
 }

 open fun <T: DefaultNotNullable.NullableBound<T>?> methodWithNullableBound() {}

 open fun <T: DefaultNotNullable.NonNullableBound<T>> methodWithNonNullableBound() {}

 companion object {
  @JvmStatic
  fun <N> genericNullableMethod(o: DefaultNotNullable.ParameterizedNullable<N>, n: N?) {
   o!!.setNullable(n)
   o!!.setNonNull(n as N)
   o!!.setDefaultNullability(n as N)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n as N
   o!!.defaultNullability = n as N
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @JvmStatic
  fun <N: Any> genericNonNullMethod(o: DefaultNotNullable.ParameterizedNonNullable<N>, n: N) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @JvmStatic
  fun <N: Any> genericDefaultNullabilityMethod(o: DefaultNotNullable.ParameterizedDefaultNullability<N>, n: N) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @JvmStatic
  fun parametrizedNullableMethod(o: DefaultNotNullable.ParameterizedNullable<String?>, s: String?) {
   o!!.setNullable(s)
   o!!.setNonNull(s!!)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s!!
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @JvmStatic
  fun parametrizedNonNullMethod(o: DefaultNotNullable.ParameterizedNonNullable<String>, s: String) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @JvmStatic
  fun parametrizedDefaultNullabilityMethod(o: DefaultNotNullable.ParameterizedDefaultNullability<String>, s: String) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @JvmStatic
  fun testListOfWildcard(l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityObject(l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNullableObject(l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNonNullObject(l: MutableList<*>) {}

  @JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityString(l: MutableList<out String>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNullableString(l: MutableList<out String?>) {}

  @JvmStatic
  fun testListOfWildcardExtendsNonNullString(l: MutableList<out String>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardExtendsDefaultNullabilityVariable(l: MutableList<out T>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardExtendsNullableVariable(l: MutableList<out T?>) {}

  @JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityObject(l: MutableList<in Any>) {}

  @JvmStatic
  fun testListOfWildcardSuperNullableObject(l: MutableList<in Any?>) {}

  @JvmStatic
  fun testListOfWildcardSuperNonNullObject(l: MutableList<in Any>) {}

  @JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityString(l: MutableList<in String>) {}

  @JvmStatic
  fun testListOfWildcardSuperNullableString(l: MutableList<in String?>) {}

  @JvmStatic
  fun testListOfWildcardSuperNonNullString(l: MutableList<in String>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardSuperDefaultNullabilityVariable(l: MutableList<in T>) {}

  @JvmStatic
  fun <T: Any> testListOfWildcardSuperNullableVariable(l: MutableList<in T?>) {}

  @JvmStatic
  fun <T: Any> testCaptureNullabilityCast(l: MutableList<in T>, t: T?) {
   l!!.add(t as T)
  }

  @JvmStatic
  fun testParametrizedTypeNullabilityCast(c: DefaultNotNullable.Consumer<String>, string: String) {
   val localString: String? = string
   c!!.accept(localString!!)
  }

  @JvmStatic
  fun <T: Any> testGenericTypeNullabilityCast(c: DefaultNotNullable.Consumer<T>, element: T) {
   val localElement: T? = element
   c!!.accept(localElement!!)
  }

  @JvmStatic
  fun testParametrizedWildcardNullabilityCast(c: DefaultNotNullable.Consumer<in String>, string: String) {
   val localString: String? = string
  }

  @JvmStatic
  fun <T: Any> testGenericWildcardNullabilityCast(c: DefaultNotNullable.Consumer<in T>, element: T) {
   val localElement: T? = element
   c!!.accept(localElement as T)
  }

  @JvmStatic
  fun testParametrizedArrayNullabilityCast(array: Array<String>) {
   val localArray: Array<String>? = array
  }

  @JvmStatic
  fun <T: Any> testGenericArrayNullabilityCast(array: Array<T>) {
   val localArray: Array<T>? = array
  }

  @JvmStatic
  fun testLocalNullability() {
   val stringConsumer: DefaultNotNullable.Consumer<String>? = (null as DefaultNotNullable.Consumer<String?>?) as DefaultNotNullable.Consumer<String>?
   val nullableStringConsumer: DefaultNotNullable.Consumer<String?>? = null as DefaultNotNullable.Consumer<String?>?
   val nonNullStringConsumer: DefaultNotNullable.Consumer<String>? = null as DefaultNotNullable.Consumer<String>?
   val b: Boolean = null is DefaultNotNullable.Consumer<*>
  }
 }

 interface ParameterizedInterface<T: Any> {
  fun add(t: T): T

  fun nullableAdd(t: T?): T?
 }

 open inner class ImplementsParameterizedInterface: DefaultNotNullable.ParameterizedInterface<String> {
  open override fun add(s: String): String {
   return "Hey"
  }

  open override fun nullableAdd(s: String?): String? {
   return "Hey"
  }
 }

 interface NullableBound<T: DefaultNotNullable.NullableBound<T>?> {}

 interface NonNullableBound<T: DefaultNotNullable.NonNullableBound<T>> {}

 interface NullableBoundWithNonNullArgument: DefaultNotNullable.NullableBound<DefaultNotNullable.NullableBoundWithNonNullArgument> {}

 interface NullableBoundWithNullableArgument: DefaultNotNullable.NullableBound<DefaultNotNullable.NullableBoundWithNullableArgument?> {}

 interface NonNullBoundWithNonNullArgument: DefaultNotNullable.NonNullableBound<DefaultNotNullable.NonNullBoundWithNonNullArgument> {}

 interface NonNullBoundWithNullableArgument: DefaultNotNullable.NonNullableBound<DefaultNotNullable.NonNullBoundWithNullableArgument> {}

 open class ParameterizedDefaultNullability<N: Any> {
  @JvmField var nullable: N? = null

  @JvmField var nonNullable: N

  @JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNullable<N> {
  @JvmField var nullable: N? = null

  @JvmField var nonNullable: N = null as N

  @JvmField var defaultNullability: N = null as N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNonNullable<N: Any> {
  @JvmField var nullable: N? = null

  @JvmField var nonNullable: N

  @JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 fun interface Consumer<T> {
  fun accept(t: T)
 }
}
