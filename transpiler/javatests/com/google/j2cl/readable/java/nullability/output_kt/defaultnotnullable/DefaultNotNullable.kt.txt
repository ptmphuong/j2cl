// Generated from "nullability/defaultnotnullable/DefaultNotNullable.java"
package nullability.defaultnotnullable

import javaemul.lang.*
import kotlin.jvm.*

open class DefaultNotNullable {
 @kotlin.jvm.JvmField var f1_private_2: kotlin.String = "Hello"

 @kotlin.jvm.JvmField var f2_private_2: kotlin.String? = null

 @kotlin.jvm.JvmField var f3_private_2: kotlin.String? = null

 @kotlin.jvm.JvmField var f4_private_2: kotlin.collections.MutableList<kotlin.String> = kotlin.collections.ArrayList<kotlin.String?>() as kotlin.collections.MutableList<kotlin.String>

 @kotlin.jvm.JvmField var f5_private_2: kotlin.collections.MutableList<kotlin.String>? = kotlin.collections.ArrayList<kotlin.String?>() as kotlin.collections.MutableList<kotlin.String>?

 @kotlin.jvm.JvmField var f6_private_2: kotlin.collections.MutableList<kotlin.String?> = kotlin.collections.ArrayList<kotlin.String?>()

 @kotlin.jvm.JvmField var f7_private_2: kotlin.collections.MutableList<kotlin.String?>? = null

 @kotlin.jvm.JvmField var f8_private_2: kotlin.Array<kotlin.String> = kotlin.arrayOf<kotlin.String?>() as kotlin.Array<kotlin.String>

 @kotlin.jvm.JvmField var f9_private_2: kotlin.Array<kotlin.String?> = kotlin.arrayOf<kotlin.String?>()

 @kotlin.jvm.JvmField var f10_private_2: kotlin.Array<kotlin.String>? = kotlin.arrayOf<kotlin.String?>() as kotlin.Array<kotlin.String>?

 @kotlin.jvm.JvmField var f11_private_2: kotlin.Unit? = null

 @kotlin.jvm.JvmField var f12_private_2: kotlin.Any = kotlin.Any()

 @kotlin.jvm.JvmField var f13_private_2: kotlin.Any

 @kotlin.jvm.JvmField var f14_private_2: kotlin.Any? = null

 constructor() {
  this.f13_private_2 = kotlin.Any()
 }

 open fun m1(a: kotlin.String, b: kotlin.collections.MutableList<kotlin.Double>): kotlin.String {
  return ""
 }

 open fun m2(a: kotlin.String?, b: kotlin.collections.MutableList<kotlin.Double?>): kotlin.String? {
  return null
 }

 open fun m3(vararg args: kotlin.String) {}

 open fun <T: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<T>?> methodWithNullableBound() {}

 open fun <T: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<T>> methodWithNonNullableBound() {}

 companion object {
  @kotlin.jvm.JvmStatic
  fun <N> genericNullableMethod(o: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedNullable<N>, n: N?) {
   o!!.setNullable(n)
   o!!.setNonNull(n as N)
   o!!.setDefaultNullability(n as N)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n as N
   o!!.defaultNullability = n as N
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun <N: kotlin.Any> genericNonNullMethod(o: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedNonNullable<N>, n: N) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun <N: kotlin.Any> genericDefaultNullabilityMethod(o: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedDefaultNullability<N>, n: N) {
   o!!.setNullable(n)
   o!!.setNonNull(n)
   o!!.setDefaultNullability(n)
   o!!.getNullable()!!.hashCode()
   o!!.getNonNullable()!!.hashCode()
   o!!.getDefaultNullability()!!.hashCode()
   o!!.nullable = n
   o!!.nonNullable = n
   o!!.defaultNullability = n
   o!!.nullable!!.hashCode()
   o!!.nonNullable!!.hashCode()
   o!!.defaultNullability!!.hashCode()
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedNullableMethod(o: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedNullable<kotlin.String?>, s: kotlin.String?) {
   o!!.setNullable(s)
   o!!.setNonNull(s!!)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s!!
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedNonNullMethod(o: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedNonNullable<kotlin.String>, s: kotlin.String) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun parametrizedDefaultNullabilityMethod(o: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedDefaultNullability<kotlin.String>, s: kotlin.String) {
   o!!.setNullable(s)
   o!!.setNonNull(s)
   o!!.setDefaultNullability(s)
   o!!.getNullable()!!.length
   o!!.getNonNullable()!!.length
   o!!.getDefaultNullability()!!.length
   o!!.nullable = s
   o!!.nonNullable = s
   o!!.defaultNullability = s
   o!!.nullable!!.length
   o!!.nonNullable!!.length
   o!!.defaultNullability!!.length
  }

  @kotlin.jvm.JvmStatic
  fun testListOfWildcard(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityObject(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNullableObject(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNonNullObject(l: kotlin.collections.MutableList<*>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsDefaultNullabilityString(l: kotlin.collections.MutableList<out kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNullableString(l: kotlin.collections.MutableList<out kotlin.String?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardExtendsNonNullString(l: kotlin.collections.MutableList<out kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardExtendsDefaultNullabilityVariable(l: kotlin.collections.MutableList<out T>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardExtendsNullableVariable(l: kotlin.collections.MutableList<out T?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityObject(l: kotlin.collections.MutableList<in kotlin.Any>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNullableObject(l: kotlin.collections.MutableList<in kotlin.Any?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNonNullObject(l: kotlin.collections.MutableList<in kotlin.Any>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperDefaultNullabilityString(l: kotlin.collections.MutableList<in kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNullableString(l: kotlin.collections.MutableList<in kotlin.String?>) {}

  @kotlin.jvm.JvmStatic
  fun testListOfWildcardSuperNonNullString(l: kotlin.collections.MutableList<in kotlin.String>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardSuperDefaultNullabilityVariable(l: kotlin.collections.MutableList<in T>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testListOfWildcardSuperNullableVariable(l: kotlin.collections.MutableList<in T?>) {}

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testCaptureNullabilityCast(l: kotlin.collections.MutableList<in T>, t: T?) {
   l!!.add(t as T)
  }

  @kotlin.jvm.JvmStatic
  fun testParametrizedTypeNullabilityCast(c: nullability.defaultnotnullable.DefaultNotNullable.Consumer<kotlin.String>, string: kotlin.String) {
   val localString: kotlin.String? = string
   c!!.accept(localString!!)
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testGenericTypeNullabilityCast(c: nullability.defaultnotnullable.DefaultNotNullable.Consumer<T>, element: T) {
   val localElement: T? = element
   c!!.accept(localElement!!)
  }

  @kotlin.jvm.JvmStatic
  fun testParametrizedWildcardNullabilityCast(c: nullability.defaultnotnullable.DefaultNotNullable.Consumer<in kotlin.String>, string: kotlin.String) {
   val localString: kotlin.String? = string
   c!!.accept(localString!!)
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testGenericWildcardNullabilityCast(c: nullability.defaultnotnullable.DefaultNotNullable.Consumer<in T>, element: T) {
   val localElement: T? = element
   c!!.accept(localElement!!)
  }

  @kotlin.jvm.JvmStatic
  fun testParametrizedArrayNullabilityCast(array: kotlin.Array<kotlin.String>) {
   val localArray: kotlin.Array<kotlin.String>? = array
  }

  @kotlin.jvm.JvmStatic
  fun <T: kotlin.Any> testGenericArrayNullabilityCast(array: kotlin.Array<T>) {
   val localArray: kotlin.Array<T>? = array
  }
 }

 interface ParameterizedInterface<T: kotlin.Any> {
  fun add(t: T): T

  fun nullableAdd(t: T?): T?
 }

 open inner class ImplementsParameterizedInterface: nullability.defaultnotnullable.DefaultNotNullable.ParameterizedInterface<kotlin.String> {
  open override fun add(s: kotlin.String): kotlin.String {
   return "Hey"
  }

  open override fun nullableAdd(s: kotlin.String?): kotlin.String? {
   return "Hey"
  }
 }

 interface NullableBound<T: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<T>?> {}

 interface NonNullableBound<T: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<T>> {}

 interface NullableBoundWithNonNullArgument: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<nullability.defaultnotnullable.DefaultNotNullable.NullableBoundWithNonNullArgument> {}

 interface NullableBoundWithNullableArgument: nullability.defaultnotnullable.DefaultNotNullable.NullableBound<nullability.defaultnotnullable.DefaultNotNullable.NullableBoundWithNullableArgument?> {}

 interface NonNullBoundWithNonNullArgument: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<nullability.defaultnotnullable.DefaultNotNullable.NonNullBoundWithNonNullArgument> {}

 interface NonNullBoundWithNullableArgument: nullability.defaultnotnullable.DefaultNotNullable.NonNullableBound<nullability.defaultnotnullable.DefaultNotNullable.NonNullBoundWithNullableArgument> {}

 open class ParameterizedDefaultNullability<N: kotlin.Any> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw java.lang.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNullable<N> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N = null as N

  @kotlin.jvm.JvmField var defaultNullability: N = null as N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw java.lang.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null as N
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 open class ParameterizedNonNullable<N: kotlin.Any> {
  @kotlin.jvm.JvmField var nullable: N? = null

  @kotlin.jvm.JvmField var nonNullable: N

  @kotlin.jvm.JvmField var defaultNullability: N

  constructor(n: N) {
   this.nonNullable = n
   this.defaultNullability = n
  }

  open fun getNullable(): N? {
   return null
  }

  open fun getNonNullable(): N {
   throw java.lang.RuntimeException()
  }

  open fun getDefaultNullability(): N {
   return null!!
  }

  open fun setNullable(n: N?) {}

  open fun setNonNull(n: N) {}

  open fun setDefaultNullability(n: N) {}
 }

 fun interface Consumer<T: kotlin.Any> {
  fun accept(t: T)
 }
}
