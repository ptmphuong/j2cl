// Generated from "intersectiontype/IntersectionTypeTest.java"
package intersectiontype

import javaemul.lang.*
import intersectiontype.Cmp
import intersectiontype.Cmp2
import intersectiontype.Getable
import intersectiontype.IntersectionTypeTest
import intersectiontype.Serial
import intersectiontype.Setable
import kotlin.Any
import kotlin.Comparable
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmStatic
import kotlin.let

fun interface Getable<T> {
 fun get(): T
}

fun interface Setable {
 fun set(i: Int)
}

interface Serial {}

fun interface Cmp {
 fun cmp(): Int
}

fun interface Cmp2<T> {
 fun cmp(a: Int): Int
}

open class IntersectionTypeTest<U> {
 open fun cast3(s: Any?): Any? {
  return s
 }

 open fun testMethodCall() {
  val o: Any? = IntersectionTypeTest.m_private_2()
  IntersectionTypeTest.set_private_2((o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it })
  IntersectionTypeTest.set_private_2(IntersectionTypeTest.m_private_2())
  val g: Getable<*>? = IntersectionTypeTest.n_private_2() as Getable<*>?
 }

 companion object {
  @JvmStatic
  fun <T> getAndSet(`object`: T) where T: Getable<*>?, T: Setable? {
   `object`!!.set(1)
   `object`!!.get()
  }

  @JvmStatic
  fun <T> cast(o: Any?): Getable<T>? {
   if (o == null) {
    return (o).let { it as Getable<T>?; it as Setable?; it }
   }
   return (o).let { it as Getable<T>?; it as Setable?; it }
  }

  @JvmStatic
  fun <T> cast1(s: Any?): Getable<Comparable<String>?>? {
   return (s).let { it as Getable<Comparable<String>?>?; it as Setable?; it }
  }

  @JvmStatic
  fun <T> cast2(s: Any?): Getable<Comparable<T & Any>?>? {
   return (s).let { it as Getable<Comparable<T & Any>?>?; it as Setable?; it }
  }

  @JvmStatic
  fun method(): Cmp? {
   return (Cmp {
    return@Cmp 1
   }).let { it as Cmp?; it as Serial?; it }
  }

  @JvmStatic
  fun method2(): Cmp2<Any?>? {
   return Cmp2<Any?> { a: Int ->
    return@Cmp2 1
   } as Cmp2<Any?>?
  }

  @JvmStatic
  fun testClosureAssignment(o: Any?) {
   val e: IntersectionTypeTest.A? = (o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it as IntersectionTypeTest.EmptyB?; it }
   val g: IntersectionTypeTest.EmptyA? = (o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it as IntersectionTypeTest.EmptyB?; it }
   val s: IntersectionTypeTest.EmptyB? = (o).let { it as IntersectionTypeTest.A?; it as IntersectionTypeTest.EmptyA?; it as IntersectionTypeTest.EmptyB?; it }
  }

  @JvmStatic
  fun <T> get_private_2(t: T): T {
   return t
  }

  @JvmStatic
  fun <T> m_private_2(): T where T: IntersectionTypeTest.A?, T: IntersectionTypeTest.EmptyA? {
   return IntersectionTypeTest.get_private_2<Any?>(Any()) as T
  }

  @JvmStatic
  fun <T> n_private_2(): Getable<T>? where T: IntersectionTypeTest.A?, T: IntersectionTypeTest.EmptyA? {
   return null
  }

  @JvmStatic
  fun <T> set_private_2(t: T) where T: IntersectionTypeTest.A?, T: IntersectionTypeTest.EmptyA? {}

  @JvmStatic
  fun <T> callOnIntersetionTypes_private_2(t: T) where T: IntersectionTypeTest.SomeConcreteType?, T: Cmp? {
   t!!.cmp()
   ((null).let { it as IntersectionTypeTest.SomeConcreteType?; it as Cmp?; it })!!.cmp()
  }
 }

 open inner class MapEntry {
  open fun <T> method(o: Any?): Getable<T>? {
   return (o).let { it as Getable<T>?; it as Setable?; it }
  }
 }

 open class A {}

 interface EmptyA {}

 interface EmptyB {}

 open class SomeConcreteType {}
}
