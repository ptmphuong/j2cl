// Generated from "cast/Casts.java"
package cast

import javaemul.lang.*
import kotlin.jvm.*

open class Casts {
 open fun testCastToClass() {
  val o: kotlin.Any? = kotlin.Any()
  val c: cast.Casts? = o as cast.Casts?
 }

 open fun testCasToInterface() {
  val o: kotlin.Any? = kotlin.Any()
  val s: java.io.Serializable? = o as java.io.Serializable?
 }

 open fun testCastToBoxedType() {
  val o: kotlin.Any? = kotlin.Int(1)
  val b: kotlin.Byte? = o as kotlin.Byte?
  val d: kotlin.Double? = o as kotlin.Double?
  val f: kotlin.Float? = o as kotlin.Float?
  val i: kotlin.Int? = o as kotlin.Int?
  val l: kotlin.Long? = o as kotlin.Long?
  val s: kotlin.Short? = o as kotlin.Short?
  val n: kotlin.Number? = o as kotlin.Number?
  val c: kotlin.Char? = o as kotlin.Char?
  val bool: kotlin.Boolean? = o as kotlin.Boolean?
 }

 open fun testCastToArray() {
  val foo: kotlin.Any? = null as kotlin.Array<kotlin.Any?>?
  val bar: kotlin.Any? = null as kotlin.Array<kotlin.Array<kotlin.Any?>?>?
 }

 fun functionForInstanceofTest_private_2() {}

 open fun testCastObjectAfterInstanceOf() {
  var o: kotlin.Any? = kotlin.Any()
  if (o is cast.Casts) {
   val c: cast.Casts? = o as cast.Casts?
  }
  if (o is cast.Casts) {
   val cAvoidsCastsTo: cast.Casts? = o as cast.Casts?
   o = kotlin.Any()
   val cNotAvoidCastsTo: cast.Casts? = o as cast.Casts?
  }
  if (o is cast.Casts) {
   val cAvoidsCastsTo_1: cast.Casts? = o as cast.Casts?
   o = Foo()
   val cNotAvoidCastsTo_1: cast.Casts? = o as cast.Casts?
  }
  if (o is cast.Casts) {
   val cAvoidsCastsTo_2: cast.Casts? = o as cast.Casts?
   o = kotlin.Any()
   val cAvoidCastsTo: cast.Casts? = o as cast.Casts?
  }
  if (o is cast.Casts) {
   val cAvoidsCastsTo_3: cast.Casts? = o as cast.Casts?
   this.functionForInstanceofTest_private_2()
   val cNotAvoidCastsTo_2: cast.Casts? = o as cast.Casts?
  }
 }

 open fun testCastFieldAfterInstanceOf() {
  var foo: cast.Casts.Foo? = Foo()
  if (foo!!.field is cast.Casts) {
   val c: cast.Casts? = foo!!.field as cast.Casts?
  }
  if (foo!!.field is cast.Casts) {
   val cAvoidsCastsTo: cast.Casts? = foo!!.field as cast.Casts?
   foo!!.field = kotlin.Any()
   val cNotAvoidCastsTo: cast.Casts? = foo!!.field as cast.Casts?
  }
  if (foo!!.field is cast.Casts) {
   val cAvoidsCastsTo_1: cast.Casts? = foo!!.field as cast.Casts?
   foo = Foo()
   val cNotAvoidCastsTo_1: cast.Casts? = foo!!.field as cast.Casts?
  }
  if (foo!!.field is cast.Casts) {
   val cAvoidsCastsTo_2: cast.Casts? = foo!!.field as cast.Casts?
   this.functionForInstanceofTest_private_2()
   val cNotAvoidCastsTo_2: cast.Casts? = foo!!.field as cast.Casts?
  }
 }

 open fun testCaseMethodAfterInstanceOf() {
  val foo: cast.Casts.Foo? = Foo()
  if (foo!!.method() is cast.Casts) {
   val cNotAvoidCastsTo: cast.Casts? = foo!!.method() as cast.Casts?
  }
 }

 open fun testPrecedence() {
  val foo: kotlin.Any? = "foo"
  val bar: kotlin.Any? = "bar"
  val s: kotlin.String? = (if (false) foo else bar) as kotlin.String?
 }

 open inner class Foo {
  @kotlin.jvm.JvmField var field: kotlin.Any? = kotlin.Any()

  open fun method(): kotlin.Any? {
   return kotlin.Any()
  }
 }
}
