// Generated from "typewildcards/TypeWildCards.java"
package typewildcards

import javaemul.lang.*
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import typewildcards.Bar
import typewildcards.DeepRecursiveType
import typewildcards.Function
import typewildcards.GenericType
import typewildcards.List
import typewildcards.RecursiveSubtype
import typewildcards.RecursiveType
import typewildcards.TypeWildCards

fun interface Function<I, O> {
 fun apply(i: I): O
}

interface List<I> {}

open class GenericType<T> {
 open fun get(): T {
  return null as T
 }
}

open class Bar {}

open class RecursiveType<T: RecursiveType<T>?> {
 constructor(wildcardParameter: RecursiveType<*>?)
}

interface DeepRecursiveType<T: GenericType<in T>?> {}

open class RecursiveSubtype: RecursiveType<RecursiveSubtype?> {
 constructor(wildcardParameter: RecursiveType<*>?): super(wildcardParameter)
}

open class TypeWildCards {
 open fun unbounded(g: GenericType<*>?): Any? {
  return g!!.get()
 }

 open fun upperBound(g: GenericType<out Bar?>?): Bar? {
  return g!!.get()
 }

 open fun lowerBound(g: GenericType<in Bar?>?): Any? {
  return g!!.get()
 }

 open fun unboundedRecursive(g: RecursiveType<*>?) {}

 open fun upperBoundRecursive(g: GenericType<out RecursiveType<*>?>?) {}

 open fun lowerBoundRecursive(g: GenericType<in RecursiveType<*>?>?) {}

 open fun deepRecursiveType(t: DeepRecursiveType<*>?) {}

 open fun test() {
  this.unbounded(GenericType<Bar?>() as GenericType<*>?)
  this.upperBound(GenericType<Bar?>() as GenericType<out Bar?>?)
  this.lowerBound(GenericType<Bar?>() as GenericType<in Bar?>?)
 }

 open fun testInferredGenericIntersection() {
  val elements: List<TypeWildCards.Element?>? = null
  val otherElements: List<TypeWildCards.SubOtherElement?>? = null
  val integers: List<Int?>? = TypeWildCards.transform_private_2(TypeWildCards.concat_private_2(elements, otherElements), Function { a ->
   a!!.getKey()
   return@Function a!!.get()
  })
 }

 open fun testRecursiveGeneric() {
  TypeWildCards.takesRecursiveGeneric_private_2(Foo())
 }

 companion object {
  @JvmStatic
  fun <T: TypeWildCards.A?> testBoundedTypeMemberAccess(t: T) {
   val i: Int = t!!.f
   t!!.m()
  }

  @JvmStatic
  fun <T> testIntersectionBoundedTypeMemberAccess(t: T) where T: TypeWildCards.A?, T: TypeWildCards.Y? {
   val i: Int = t!!.f
   t!!.m()
   t!!.n()
  }

  @JvmStatic
  fun <F, V> transform_private_2(from: List<F>?, function: Function<in F, out V>?): List<V>? {
   return null
  }

  @JvmStatic
  fun <E> concat_private_2(a: List<out E>?, b: List<out E>?): List<E>? {
   return null
  }

  @JvmStatic
  fun takesRecursiveGeneric_private_2(foo: GenericType<TypeWildCards.Foo?>?) {}

  @JvmStatic
  fun <C> testInferredIntersectionWithTypeVariable(ri: TypeWildCards.RecursiveInterface<out C, C>?): C {
   return ri!!.m()
  }

  @JvmStatic
  fun <D> createMultipleGenerics(foo: List<D>?): TypeWildCards.MultipleGenerics<D, String?, List<D>?>? {
   return null
  }

  @JvmField var listWithWildcard: List<*>? = null

  @JvmField var valMultipleGenerics: TypeWildCards.MultipleGenerics<*, String?, *>? = TypeWildCards.createMultipleGenerics(TypeWildCards.listWithWildcard) as TypeWildCards.MultipleGenerics<*, String?, *>?
 }

 fun interface X {
  fun m()
 }

 fun interface Y {
  fun n()
 }

 open class A: TypeWildCards.X {
  @JvmField var f: Int = 0

  open override fun m() {}
 }

 fun interface IntegerSupplier {
  fun get(): Int?
 }

 fun interface HasKey {
  fun getKey(): String?
 }

 abstract inner class Element: TypeWildCards.HasKey, TypeWildCards.IntegerSupplier {}

 abstract inner class OtherElement: TypeWildCards.IntegerSupplier, TypeWildCards.HasKey {}

 abstract inner class SubOtherElement: TypeWildCards.HasKey, TypeWildCards.OtherElement() {}

 open inner class Foo: GenericType<TypeWildCards.Foo?>() {}

 fun interface RecursiveInterface<T: TypeWildCards.RecursiveInterface<T, C>?, C> {
  fun m(): T
 }

 open inner class MultipleGenerics<A, B, C> {}
}
