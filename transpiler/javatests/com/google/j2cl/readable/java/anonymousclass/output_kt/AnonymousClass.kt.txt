// Generated from "anonymousclass/AnonymousClass.java"
package anonymousclass

import javaemul.lang.*
import anonymousclass.SomeClass
import anonymousclass.SomeClassWithStaticMembers
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic

abstract class SomeClass {
 abstract fun foo(): String?

 constructor(i: Int)
}

abstract class SomeClassWithStaticMembers {
 abstract fun foo(): String?

 constructor(i: Int)

 companion object {
  @JvmStatic
  fun staticMethod() {}
 }
}

open class AnonymousClass {
 @JvmField var i: Int = 0

 open fun main() {
  val instance: SomeClass? = object : SomeClass(this@AnonymousClass.i) {
   @JvmField var `object`: Any? = this

   @JvmField var outer: Any? = this@AnonymousClass

   open override fun foo(): String? {
    return "a"
   }
  }
  val instanceWithStaticMembers: SomeClassWithStaticMembers? = object : SomeClassWithStaticMembers(this@AnonymousClass.i) {
   @JvmField var `object`: Any? = this

   @JvmField var outer: Any? = this@AnonymousClass

   open override fun foo(): String? {
    return "a"
   }
  }
 }
}

interface SomeInterface {
 companion object {
  @JvmField val implicitlyStatic: SomeClass? = object : SomeClass(1) {
   open override fun foo(): String? {
    return "a"
   }
  }
 }
}
